/* Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University */
/* Copyright (c) 2011, 2012 Open Networking Foundation */
/* Copyright (c) 2012, 2013 Big Switch Networks, Inc. */
/* See the file LICENSE.loci which should have been included in the source distribution */

/****************************************************************
 * File: loci_doc.h
 *
 * DO NOT EDIT
 *
 * This file is automatically generated
 *
 ****************************************************************/


#if !defined(_LOCI_DOC_H_)
#define _LOCI_DOC_H_

/* DOCUMENTATION ONLY */

/**
 * Structure for of_aggregate_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_aggregate_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_aggregate_stats_reply_uint16_get_f and _set_f.
 *
 * @param packet_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for packet_count, a variable of type uint64.  Functions
 *   are of type of_aggregate_stats_reply_uint64_get_f and _set_f.
 *
 * @param byte_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for byte_count, a variable of type uint64.  Functions
 *   are of type of_aggregate_stats_reply_uint64_get_f and _set_f.
 *
 * @param flow_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flow_count, a variable of type uint32.  Functions
 *   are of type of_aggregate_stats_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_aggregate_stats_reply_s of_aggregate_stats_reply_t;

/**
 * Structure for of_aggregate_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_aggregate_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_aggregate_stats_request_uint16_get_f and _set_f.
 *
 * @param table_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_aggregate_stats_request_uint8_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_aggregate_stats_request_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_aggregate_stats_request_uint32_get_f and _set_f.
 *
 * @param cookie_get/set 
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_aggregate_stats_request_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_aggregate_stats_request_uint64_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_aggregate_stats_request_of_match_get_f and _set_f.
 *
 */
typedef struct of_aggregate_stats_request_s of_aggregate_stats_request_t;

/**
 * Structure for of_async_get_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_slave_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param port_status_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for port_status_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param port_status_mask_slave_get/set ( OF_1_3).
 *   Accessors for port_status_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_slave_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_async_get_reply_s of_async_get_reply_t;

/**
 * Structure for of_async_get_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_slave_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param port_status_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for port_status_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param port_status_mask_slave_get/set ( OF_1_3).
 *   Accessors for port_status_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_slave_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_get_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_async_get_request_s of_async_get_request_t;

/**
 * Structure for of_async_set object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param packet_in_mask_slave_get/set ( OF_1_3).
 *   Accessors for packet_in_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param port_status_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for port_status_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param port_status_mask_slave_get/set ( OF_1_3).
 *   Accessors for port_status_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_equal_master_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_equal_master, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 * @param flow_removed_mask_slave_get/set ( OF_1_3).
 *   Accessors for flow_removed_mask_slave, a variable of type uint32.  Functions
 *   are of type of_async_set_uint32_get_f and _set_f.
 *
 */
typedef struct of_async_set_s of_async_set_t;

/**
 * Structure for of_bad_action_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bad_action_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_bad_action_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bad_action_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bad_action_error_msg_s of_bad_action_error_msg_t;

/**
 * Structure for of_bad_instruction_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bad_instruction_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set 
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_bad_instruction_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bad_instruction_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bad_instruction_error_msg_s of_bad_instruction_error_msg_t;

/**
 * Structure for of_bad_match_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bad_match_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set 
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_bad_match_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bad_match_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bad_match_error_msg_s of_bad_match_error_msg_t;

/**
 * Structure for of_bad_request_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bad_request_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_bad_request_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bad_request_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bad_request_error_msg_s of_bad_request_error_msg_t;

/**
 * Structure for of_barrier_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_barrier_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_barrier_reply_s of_barrier_reply_t;

/**
 * Structure for of_barrier_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_barrier_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_barrier_request_s of_barrier_request_t;

/**
 * Structure for of_bsn_bw_clear_data_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_clear_data_reply_s of_bsn_bw_clear_data_reply_t;

/**
 * Structure for of_bsn_bw_clear_data_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_clear_data_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_clear_data_request_s of_bsn_bw_clear_data_request_t;

/**
 * Structure for of_bsn_bw_enable_get_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param enabled_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for enabled, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_enable_get_reply_s of_bsn_bw_enable_get_reply_t;

/**
 * Structure for of_bsn_bw_enable_get_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_get_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_enable_get_request_s of_bsn_bw_enable_get_request_t;

/**
 * Structure for of_bsn_bw_enable_set_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param enable_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for enable, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_enable_set_reply_s of_bsn_bw_enable_set_reply_t;

/**
 * Structure for of_bsn_bw_enable_set_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_request_uint32_get_f and _set_f.
 *
 * @param enable_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for enable, a variable of type uint32.  Functions
 *   are of type of_bsn_bw_enable_set_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_bw_enable_set_request_s of_bsn_bw_enable_set_request_t;

/**
 * Structure for of_bsn_flow_idle object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_bsn_flow_idle_uint64_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_bsn_flow_idle_uint16_get_f and _set_f.
 *
 * @param table_id_get/set ( OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_bsn_flow_idle_uint8_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_bsn_flow_idle_of_match_get_f and _set_f.
 *
 */
typedef struct of_bsn_flow_idle_s of_bsn_flow_idle_t;

/**
 * Structure for of_bsn_flow_idle_enable_get_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_reply_uint32_get_f and _set_f.
 *
 * @param enabled_get/set ( OF_1_3).
 *   Accessors for enabled, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_flow_idle_enable_get_reply_s of_bsn_flow_idle_enable_get_reply_t;

/**
 * Structure for of_bsn_flow_idle_enable_get_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_get_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_flow_idle_enable_get_request_s of_bsn_flow_idle_enable_get_request_t;

/**
 * Structure for of_bsn_flow_idle_enable_set_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param enable_get/set ( OF_1_3).
 *   Accessors for enable, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_flow_idle_enable_set_reply_s of_bsn_flow_idle_enable_set_reply_t;

/**
 * Structure for of_bsn_flow_idle_enable_set_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_request_uint32_get_f and _set_f.
 *
 * @param enable_get/set ( OF_1_3).
 *   Accessors for enable, a variable of type uint32.  Functions
 *   are of type of_bsn_flow_idle_enable_set_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_flow_idle_enable_set_request_s of_bsn_flow_idle_enable_set_request_t;

/**
 * Structure for of_bsn_get_interfaces_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_reply_uint32_get_f and _set_f.
 *
 * @param interfaces_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for interfaces, a variable of type of_list_bsn_interface.  Functions
 *   are of type of_bsn_get_interfaces_reply_of_list_bsn_interface_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_interfaces_reply_s of_bsn_get_interfaces_reply_t;

/**
 * Structure for of_bsn_get_interfaces_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_interfaces_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_interfaces_request_s of_bsn_get_interfaces_request_t;

/**
 * Structure for of_bsn_get_ip_mask_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_reply_uint32_get_f and _set_f.
 *
 * @param index_get/set ( OF_1_0).
 *   Accessors for index, a variable of type uint8.  Functions
 *   are of type of_bsn_get_ip_mask_reply_uint8_get_f and _set_f.
 *
 * @param mask_get/set ( OF_1_0).
 *   Accessors for mask, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_ip_mask_reply_s of_bsn_get_ip_mask_reply_t;

/**
 * Structure for of_bsn_get_ip_mask_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_ip_mask_request_uint32_get_f and _set_f.
 *
 * @param index_get/set ( OF_1_0).
 *   Accessors for index, a variable of type uint8.  Functions
 *   are of type of_bsn_get_ip_mask_request_uint8_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_ip_mask_request_s of_bsn_get_ip_mask_request_t;

/**
 * Structure for of_bsn_get_l2_table_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param l2_table_enable_get/set ( OF_1_0).
 *   Accessors for l2_table_enable, a variable of type uint8.  Functions
 *   are of type of_bsn_get_l2_table_reply_uint8_get_f and _set_f.
 *
 * @param l2_table_priority_get/set ( OF_1_0).
 *   Accessors for l2_table_priority, a variable of type uint16.  Functions
 *   are of type of_bsn_get_l2_table_reply_uint16_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_l2_table_reply_s of_bsn_get_l2_table_reply_t;

/**
 * Structure for of_bsn_get_l2_table_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_l2_table_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_l2_table_request_s of_bsn_get_l2_table_request_t;

/**
 * Structure for of_bsn_get_mirroring_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_reply_uint32_get_f and _set_f.
 *
 * @param report_mirror_ports_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for report_mirror_ports, a variable of type uint8.  Functions
 *   are of type of_bsn_get_mirroring_reply_uint8_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_mirroring_reply_s of_bsn_get_mirroring_reply_t;

/**
 * Structure for of_bsn_get_mirroring_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_get_mirroring_request_uint32_get_f and _set_f.
 *
 * @param report_mirror_ports_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for report_mirror_ports, a variable of type uint8.  Functions
 *   are of type of_bsn_get_mirroring_request_uint8_get_f and _set_f.
 *
 */
typedef struct of_bsn_get_mirroring_request_s of_bsn_get_mirroring_request_t;

/**
 * Structure for of_bsn_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_header_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_header_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_header_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_header_s of_bsn_header_t;

/**
 * Structure for of_bsn_hybrid_get_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_reply_uint32_get_f and _set_f.
 *
 * @param hybrid_enable_get/set ( OF_1_0).
 *   Accessors for hybrid_enable, a variable of type uint8.  Functions
 *   are of type of_bsn_hybrid_get_reply_uint8_get_f and _set_f.
 *
 * @param hybrid_version_get/set ( OF_1_0).
 *   Accessors for hybrid_version, a variable of type uint16.  Functions
 *   are of type of_bsn_hybrid_get_reply_uint16_get_f and _set_f.
 *
 */
typedef struct of_bsn_hybrid_get_reply_s of_bsn_hybrid_get_reply_t;

/**
 * Structure for of_bsn_hybrid_get_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_hybrid_get_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_hybrid_get_request_s of_bsn_hybrid_get_request_t;

/**
 * Structure for of_bsn_pdu_rx_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_pdu_rx_reply_s of_bsn_pdu_rx_reply_t;

/**
 * Structure for of_bsn_pdu_rx_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_request_uint32_get_f and _set_f.
 *
 * @param timeout_ms_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for timeout_ms, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_request_uint32_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_bsn_pdu_rx_request_of_port_no_get_f and _set_f.
 *
 * @param slot_num_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for slot_num, a variable of type uint8.  Functions
 *   are of type of_bsn_pdu_rx_request_uint8_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bsn_pdu_rx_request_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bsn_pdu_rx_request_s of_bsn_pdu_rx_request_t;

/**
 * Structure for of_bsn_pdu_rx_timeout object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_timeout_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_timeout_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_rx_timeout_uint32_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_bsn_pdu_rx_timeout_of_port_no_get_f and _set_f.
 *
 * @param slot_num_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for slot_num, a variable of type uint8.  Functions
 *   are of type of_bsn_pdu_rx_timeout_uint8_get_f and _set_f.
 *
 */
typedef struct of_bsn_pdu_rx_timeout_s of_bsn_pdu_rx_timeout_t;

/**
 * Structure for of_bsn_pdu_tx_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_pdu_tx_reply_s of_bsn_pdu_tx_reply_t;

/**
 * Structure for of_bsn_pdu_tx_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_request_uint32_get_f and _set_f.
 *
 * @param tx_interval_ms_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_interval_ms, a variable of type uint32.  Functions
 *   are of type of_bsn_pdu_tx_request_uint32_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_bsn_pdu_tx_request_of_port_no_get_f and _set_f.
 *
 * @param slot_num_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for slot_num, a variable of type uint8.  Functions
 *   are of type of_bsn_pdu_tx_request_uint8_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bsn_pdu_tx_request_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bsn_pdu_tx_request_s of_bsn_pdu_tx_request_t;

/**
 * Structure for of_bsn_set_ip_mask object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_ip_mask_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_ip_mask_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_ip_mask_uint32_get_f and _set_f.
 *
 * @param index_get/set ( OF_1_0).
 *   Accessors for index, a variable of type uint8.  Functions
 *   are of type of_bsn_set_ip_mask_uint8_get_f and _set_f.
 *
 * @param mask_get/set ( OF_1_0).
 *   Accessors for mask, a variable of type uint32.  Functions
 *   are of type of_bsn_set_ip_mask_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_ip_mask_s of_bsn_set_ip_mask_t;

/**
 * Structure for of_bsn_set_l2_table_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint32_get_f and _set_f.
 *
 * @param l2_table_enable_get/set ( OF_1_0).
 *   Accessors for l2_table_enable, a variable of type uint8.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint8_get_f and _set_f.
 *
 * @param l2_table_priority_get/set ( OF_1_0).
 *   Accessors for l2_table_priority, a variable of type uint16.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint16_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_l2_table_reply_s of_bsn_set_l2_table_reply_t;

/**
 * Structure for of_bsn_set_l2_table_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_l2_table_request_uint32_get_f and _set_f.
 *
 * @param l2_table_enable_get/set ( OF_1_0).
 *   Accessors for l2_table_enable, a variable of type uint8.  Functions
 *   are of type of_bsn_set_l2_table_request_uint8_get_f and _set_f.
 *
 * @param l2_table_priority_get/set ( OF_1_0).
 *   Accessors for l2_table_priority, a variable of type uint16.  Functions
 *   are of type of_bsn_set_l2_table_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_l2_table_request_s of_bsn_set_l2_table_request_t;

/**
 * Structure for of_bsn_set_mirroring object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_mirroring_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_mirroring_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_mirroring_uint32_get_f and _set_f.
 *
 * @param report_mirror_ports_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for report_mirror_ports, a variable of type uint8.  Functions
 *   are of type of_bsn_set_mirroring_uint8_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_mirroring_s of_bsn_set_mirroring_t;

/**
 * Structure for of_bsn_set_pktin_suppression_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_pktin_suppression_reply_s of_bsn_set_pktin_suppression_reply_t;

/**
 * Structure for of_bsn_set_pktin_suppression_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint32_get_f and _set_f.
 *
 * @param enabled_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for enabled, a variable of type uint8.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint16_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_bsn_set_pktin_suppression_request_uint64_get_f and _set_f.
 *
 */
typedef struct of_bsn_set_pktin_suppression_request_s of_bsn_set_pktin_suppression_request_t;

/**
 * Structure for of_bsn_shell_command object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_command_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_command_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_command_uint32_get_f and _set_f.
 *
 * @param service_get/set ( OF_1_0).
 *   Accessors for service, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_command_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bsn_shell_command_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bsn_shell_command_s of_bsn_shell_command_t;

/**
 * Structure for of_bsn_shell_output object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_output_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_output_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_output_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_bsn_shell_output_of_octets_get_f and _set_f.
 *
 */
typedef struct of_bsn_shell_output_s of_bsn_shell_output_t;

/**
 * Structure for of_bsn_shell_status object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_status_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_status_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_status_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_shell_status_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_shell_status_s of_bsn_shell_status_t;

/**
 * Structure for of_bsn_virtual_port_create_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_reply_uint32_get_f and _set_f.
 *
 * @param vport_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for vport_no, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_virtual_port_create_reply_s of_bsn_virtual_port_create_reply_t;

/**
 * Structure for of_bsn_virtual_port_create_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_create_request_uint32_get_f and _set_f.
 *
 * @param vport_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for vport, a variable of type of_bsn_vport_q_in_q.  Functions
 *   are of type of_bsn_virtual_port_create_request_of_bsn_vport_q_in_q_get_f and _set_f.
 *
 */
typedef struct of_bsn_virtual_port_create_request_s of_bsn_virtual_port_create_request_t;

/**
 * Structure for of_bsn_virtual_port_remove_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_reply_uint32_get_f and _set_f.
 *
 * @param status_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for status, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_virtual_port_remove_reply_s of_bsn_virtual_port_remove_reply_t;

/**
 * Structure for of_bsn_virtual_port_remove_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_request_uint32_get_f and _set_f.
 *
 * @param vport_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for vport_no, a variable of type uint32.  Functions
 *   are of type of_bsn_virtual_port_remove_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_bsn_virtual_port_remove_request_s of_bsn_virtual_port_remove_request_t;

/**
 * Structure for of_desc_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_desc_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_desc_stats_reply_uint16_get_f and _set_f.
 *
 * @param mfr_desc_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for mfr_desc, a variable of type of_desc_str.  Functions
 *   are of type of_desc_stats_reply_of_desc_str_get_f and _set_f.
 *
 * @param hw_desc_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hw_desc, a variable of type of_desc_str.  Functions
 *   are of type of_desc_stats_reply_of_desc_str_get_f and _set_f.
 *
 * @param sw_desc_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for sw_desc, a variable of type of_desc_str.  Functions
 *   are of type of_desc_stats_reply_of_desc_str_get_f and _set_f.
 *
 * @param serial_num_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for serial_num, a variable of type of_serial_num.  Functions
 *   are of type of_desc_stats_reply_of_serial_num_get_f and _set_f.
 *
 * @param dp_desc_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for dp_desc, a variable of type of_desc_str.  Functions
 *   are of type of_desc_stats_reply_of_desc_str_get_f and _set_f.
 *
 */
typedef struct of_desc_stats_reply_s of_desc_stats_reply_t;

/**
 * Structure for of_desc_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_desc_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_desc_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_desc_stats_request_s of_desc_stats_request_t;

/**
 * Structure for of_echo_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_echo_reply_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_echo_reply_of_octets_get_f and _set_f.
 *
 */
typedef struct of_echo_reply_s of_echo_reply_t;

/**
 * Structure for of_echo_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_echo_request_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_echo_request_of_octets_get_f and _set_f.
 *
 */
typedef struct of_echo_request_s of_echo_request_t;

/**
 * Structure for of_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_error_msg_uint32_get_f and _set_f.
 *
 */
typedef struct of_error_msg_s of_error_msg_t;

/**
 * Structure for of_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_experimenter_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_experimenter_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_experimenter_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_experimenter_of_octets_get_f and _set_f.
 *
 */
typedef struct of_experimenter_s of_experimenter_t;

/**
 * Structure for of_experimenter_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_experimenter_error_msg_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint16.  Functions
 *   are of type of_experimenter_error_msg_uint16_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_experimenter_error_msg_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_experimenter_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_experimenter_error_msg_s of_experimenter_error_msg_t;

/**
 * Structure for of_experimenter_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_experimenter_stats_reply_uint16_get_f and _set_f.
 *
 * @param experimenter_get/set 
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_2).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_reply_uint32_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_experimenter_stats_reply_of_octets_get_f and _set_f.
 *
 */
typedef struct of_experimenter_stats_reply_s of_experimenter_stats_reply_t;

/**
 * Structure for of_experimenter_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_experimenter_stats_request_uint16_get_f and _set_f.
 *
 * @param experimenter_get/set 
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_2).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_request_uint32_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_experimenter_stats_request_of_octets_get_f and _set_f.
 *
 */
typedef struct of_experimenter_stats_request_s of_experimenter_stats_request_t;

/**
 * Structure for of_features_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_features_reply_uint32_get_f and _set_f.
 *
 * @param datapath_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for datapath_id, a variable of type uint64.  Functions
 *   are of type of_features_reply_uint64_get_f and _set_f.
 *
 * @param n_buffers_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for n_buffers, a variable of type uint32.  Functions
 *   are of type of_features_reply_uint32_get_f and _set_f.
 *
 * @param n_tables_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for n_tables, a variable of type uint8.  Functions
 *   are of type of_features_reply_uint8_get_f and _set_f.
 *
 * @param auxiliary_id_get/set ( OF_1_3).
 *   Accessors for auxiliary_id, a variable of type uint8.  Functions
 *   are of type of_features_reply_uint8_get_f and _set_f.
 *
 * @param capabilities_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for capabilities, a variable of type uint32.  Functions
 *   are of type of_features_reply_uint32_get_f and _set_f.
 *
 * @param reserved_get/set 
 *   Accessors for reserved, a variable of type uint32.  Functions
 *   are of type of_features_reply_uint32_get_f and _set_f.
 *
 * @param ports_get/set 
 *   Accessors for ports, a variable of type of_list_port_desc.  Functions
 *   are of type of_features_reply_of_list_port_desc_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type uint32.  Functions
 *   are of type of_features_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_features_reply_s of_features_reply_t;

/**
 * Structure for of_features_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_features_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_features_request_s of_features_request_t;

/**
 * Structure for of_flow_add object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_add_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_add_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_add_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_add_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_add_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_add_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_add_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_add_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_add_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_add_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_add_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_add_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_add_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_add_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_add_s of_flow_add_t;

/**
 * Structure for of_flow_delete object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_delete_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_delete_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_delete_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_delete_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_delete_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_delete_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_delete_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_delete_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_delete_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_delete_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_delete_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_delete_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_delete_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_delete_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_delete_s of_flow_delete_t;

/**
 * Structure for of_flow_delete_strict object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_delete_strict_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_delete_strict_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_delete_strict_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_delete_strict_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_delete_strict_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_delete_strict_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_delete_strict_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_delete_strict_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_delete_strict_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_delete_strict_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_delete_strict_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_delete_strict_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_delete_strict_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_delete_strict_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_delete_strict_s of_flow_delete_strict_t;

/**
 * Structure for of_flow_mod object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_mod_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_mod_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_mod_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_mod_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_mod_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_mod_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_mod_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_mod_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_mod_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_mod_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_mod_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_mod_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_mod_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_mod_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_mod_s of_flow_mod_t;

/**
 * Structure for of_flow_mod_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_mod_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_flow_mod_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_flow_mod_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_flow_mod_failed_error_msg_s of_flow_mod_failed_error_msg_t;

/**
 * Structure for of_flow_modify object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_modify_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_modify_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_modify_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_modify_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_modify_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_modify_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_modify_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_modify_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_modify_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_modify_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_modify_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_modify_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_modify_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_modify_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_modify_s of_flow_modify_t;

/**
 * Structure for of_flow_modify_strict object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_modify_strict_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_modify_strict_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_modify_strict_uint64_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_modify_strict_uint8_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_modify_strict_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_modify_strict_uint16_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_modify_strict_uint16_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_flow_modify_strict_uint32_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_modify_strict_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_modify_strict_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_modify_strict_uint16_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_modify_strict_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_modify_strict_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_modify_strict_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_modify_strict_s of_flow_modify_strict_t;

/**
 * Structure for of_flow_removed object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_removed_uint32_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_removed_uint64_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_removed_uint16_get_f and _set_f.
 *
 * @param reason_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for reason, a variable of type uint8.  Functions
 *   are of type of_flow_removed_uint8_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_removed_uint8_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_flow_removed_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_flow_removed_uint32_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_removed_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_removed_uint16_get_f and _set_f.
 *
 * @param packet_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for packet_count, a variable of type uint64.  Functions
 *   are of type of_flow_removed_uint64_get_f and _set_f.
 *
 * @param byte_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for byte_count, a variable of type uint64.  Functions
 *   are of type of_flow_removed_uint64_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_removed_of_match_get_f and _set_f.
 *
 */
typedef struct of_flow_removed_s of_flow_removed_t;

/**
 * Structure for of_flow_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for entries, a variable of type of_list_flow_stats_entry.  Functions
 *   are of type of_flow_stats_reply_of_list_flow_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_flow_stats_reply_s of_flow_stats_reply_t;

/**
 * Structure for of_flow_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_flow_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_stats_request_uint16_get_f and _set_f.
 *
 * @param table_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_stats_request_uint8_get_f and _set_f.
 *
 * @param out_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for out_port, a variable of type of_port_no.  Functions
 *   are of type of_flow_stats_request_of_port_no_get_f and _set_f.
 *
 * @param out_group_get/set 
 *   Accessors for out_group, a variable of type uint32.  Functions
 *   are of type of_flow_stats_request_uint32_get_f and _set_f.
 *
 * @param cookie_get/set 
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_stats_request_uint64_get_f and _set_f.
 *
 * @param cookie_mask_get/set 
 *   Accessors for cookie_mask, a variable of type uint64.  Functions
 *   are of type of_flow_stats_request_uint64_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_stats_request_of_match_get_f and _set_f.
 *
 */
typedef struct of_flow_stats_request_s of_flow_stats_request_t;

/**
 * Structure for of_get_config_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_get_config_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_get_config_reply_uint16_get_f and _set_f.
 *
 * @param miss_send_len_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for miss_send_len, a variable of type uint16.  Functions
 *   are of type of_get_config_reply_uint16_get_f and _set_f.
 *
 */
typedef struct of_get_config_reply_s of_get_config_reply_t;

/**
 * Structure for of_get_config_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_get_config_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_get_config_request_s of_get_config_request_t;

/**
 * Structure for of_group_desc_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_desc_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_desc_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set 
 *   Accessors for entries, a variable of type of_list_group_desc_stats_entry.  Functions
 *   are of type of_group_desc_stats_reply_of_list_group_desc_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_group_desc_stats_reply_s of_group_desc_stats_reply_t;

/**
 * Structure for of_group_desc_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_desc_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_desc_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_group_desc_stats_request_s of_group_desc_stats_request_t;

/**
 * Structure for of_group_features_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_features_stats_reply_uint16_get_f and _set_f.
 *
 * @param types_get/set ( OF_1_2 OF_1_3).
 *   Accessors for types, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param capabilities_get/set ( OF_1_2 OF_1_3).
 *   Accessors for capabilities, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param max_groups_all_get/set ( OF_1_2 OF_1_3).
 *   Accessors for max_groups_all, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param max_groups_select_get/set ( OF_1_2 OF_1_3).
 *   Accessors for max_groups_select, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param max_groups_indirect_get/set ( OF_1_2 OF_1_3).
 *   Accessors for max_groups_indirect, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param max_groups_ff_get/set ( OF_1_2 OF_1_3).
 *   Accessors for max_groups_ff, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param actions_all_get/set ( OF_1_2 OF_1_3).
 *   Accessors for actions_all, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param actions_select_get/set ( OF_1_2 OF_1_3).
 *   Accessors for actions_select, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param actions_indirect_get/set ( OF_1_2 OF_1_3).
 *   Accessors for actions_indirect, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param actions_ff_get/set ( OF_1_2 OF_1_3).
 *   Accessors for actions_ff, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_group_features_stats_reply_s of_group_features_stats_reply_t;

/**
 * Structure for of_group_features_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_features_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_features_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_group_features_stats_request_s of_group_features_stats_request_t;

/**
 * Structure for of_group_mod object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_mod_uint32_get_f and _set_f.
 *
 * @param command_get/set 
 *   Accessors for command, a variable of type uint16.  Functions
 *   are of type of_group_mod_uint16_get_f and _set_f.
 *
 * @param group_type_get/set 
 *   Accessors for group_type, a variable of type uint8.  Functions
 *   are of type of_group_mod_uint8_get_f and _set_f.
 *
 * @param group_id_get/set 
 *   Accessors for group_id, a variable of type uint32.  Functions
 *   are of type of_group_mod_uint32_get_f and _set_f.
 *
 * @param buckets_get/set 
 *   Accessors for buckets, a variable of type of_list_bucket.  Functions
 *   are of type of_group_mod_of_list_bucket_get_f and _set_f.
 *
 */
typedef struct of_group_mod_s of_group_mod_t;

/**
 * Structure for of_group_mod_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_mod_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set 
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_group_mod_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_group_mod_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_group_mod_failed_error_msg_s of_group_mod_failed_error_msg_t;

/**
 * Structure for of_group_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set 
 *   Accessors for entries, a variable of type of_list_group_stats_entry.  Functions
 *   are of type of_group_stats_reply_of_list_group_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_group_stats_reply_s of_group_stats_reply_t;

/**
 * Structure for of_group_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_group_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set 
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_group_stats_request_uint16_get_f and _set_f.
 *
 * @param group_id_get/set 
 *   Accessors for group_id, a variable of type uint32.  Functions
 *   are of type of_group_stats_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_group_stats_request_s of_group_stats_request_t;

/**
 * Structure for of_hello object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_hello_uint32_get_f and _set_f.
 *
 * @param elements_get/set ( OF_1_3).
 *   Accessors for elements, a variable of type of_list_hello_elem.  Functions
 *   are of type of_hello_of_list_hello_elem_get_f and _set_f.
 *
 */
typedef struct of_hello_s of_hello_t;

/**
 * Structure for of_hello_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_hello_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_hello_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_hello_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_hello_failed_error_msg_s of_hello_failed_error_msg_t;

/**
 * Structure for of_meter_config_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_config_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_config_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_meter_band.  Functions
 *   are of type of_meter_config_stats_reply_of_list_meter_band_get_f and _set_f.
 *
 */
typedef struct of_meter_config_stats_reply_s of_meter_config_stats_reply_t;

/**
 * Structure for of_meter_config_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_config_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_config_stats_request_uint16_get_f and _set_f.
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_meter_config_stats_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_meter_config_stats_request_s of_meter_config_stats_request_t;

/**
 * Structure for of_meter_features_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_features_stats_reply_uint16_get_f and _set_f.
 *
 * @param features_get/set ( OF_1_3).
 *   Accessors for features, a variable of type of_meter_features.  Functions
 *   are of type of_meter_features_stats_reply_of_meter_features_get_f and _set_f.
 *
 */
typedef struct of_meter_features_stats_reply_s of_meter_features_stats_reply_t;

/**
 * Structure for of_meter_features_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_features_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_features_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_meter_features_stats_request_s of_meter_features_stats_request_t;

/**
 * Structure for of_meter_mod object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_mod_uint32_get_f and _set_f.
 *
 * @param command_get/set ( OF_1_3).
 *   Accessors for command, a variable of type uint16.  Functions
 *   are of type of_meter_mod_uint16_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_mod_uint16_get_f and _set_f.
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_meter_mod_uint32_get_f and _set_f.
 *
 * @param meters_get/set ( OF_1_3).
 *   Accessors for meters, a variable of type of_list_meter_band.  Functions
 *   are of type of_meter_mod_of_list_meter_band_get_f and _set_f.
 *
 */
typedef struct of_meter_mod_s of_meter_mod_t;

/**
 * Structure for of_meter_mod_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_mod_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_meter_mod_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_meter_mod_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_meter_mod_failed_error_msg_s of_meter_mod_failed_error_msg_t;

/**
 * Structure for of_meter_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_meter_stats.  Functions
 *   are of type of_meter_stats_reply_of_list_meter_stats_get_f and _set_f.
 *
 */
typedef struct of_meter_stats_reply_s of_meter_stats_reply_t;

/**
 * Structure for of_meter_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_meter_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_stats_request_uint16_get_f and _set_f.
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_meter_stats_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_meter_stats_request_s of_meter_stats_request_t;

/**
 * Structure for of_nicira_controller_role_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_reply_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_reply_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_reply_uint32_get_f and _set_f.
 *
 * @param role_get/set ( OF_1_0).
 *   Accessors for role, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_reply_uint32_get_f and _set_f.
 *
 */
typedef struct of_nicira_controller_role_reply_s of_nicira_controller_role_reply_t;

/**
 * Structure for of_nicira_controller_role_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_request_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_request_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_request_uint32_get_f and _set_f.
 *
 * @param role_get/set ( OF_1_0).
 *   Accessors for role, a variable of type uint32.  Functions
 *   are of type of_nicira_controller_role_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_nicira_controller_role_request_s of_nicira_controller_role_request_t;

/**
 * Structure for of_nicira_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_nicira_header_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_nicira_header_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_nicira_header_uint32_get_f and _set_f.
 *
 */
typedef struct of_nicira_header_s of_nicira_header_t;

/**
 * Structure for of_packet_in object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_packet_in_uint32_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_packet_in_uint32_get_f and _set_f.
 *
 * @param total_len_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for total_len, a variable of type uint16.  Functions
 *   are of type of_packet_in_uint16_get_f and _set_f.
 *
 * @param reason_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for reason, a variable of type uint8.  Functions
 *   are of type of_packet_in_uint8_get_f and _set_f.
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_packet_in_uint8_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_packet_in_uint64_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_packet_in_of_match_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_packet_in_of_octets_get_f and _set_f.
 *
 * @param in_port_get/set ( OF_1_0 OF_1_1).
 *   Accessors for in_port, a variable of type of_port_no.  Functions
 *   are of type of_packet_in_of_port_no_get_f and _set_f.
 *
 * @param in_phy_port_get/set ( OF_1_1).
 *   Accessors for in_phy_port, a variable of type of_port_no.  Functions
 *   are of type of_packet_in_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_packet_in_s of_packet_in_t;

/**
 * Structure for of_packet_out object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_packet_out_uint32_get_f and _set_f.
 *
 * @param buffer_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for buffer_id, a variable of type uint32.  Functions
 *   are of type of_packet_out_uint32_get_f and _set_f.
 *
 * @param in_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for in_port, a variable of type of_port_no.  Functions
 *   are of type of_packet_out_of_port_no_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_packet_out_of_list_action_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_packet_out_of_octets_get_f and _set_f.
 *
 */
typedef struct of_packet_out_s of_packet_out_t;

/**
 * Structure for of_port_desc_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_desc_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_port_desc_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_port_desc.  Functions
 *   are of type of_port_desc_stats_reply_of_list_port_desc_get_f and _set_f.
 *
 */
typedef struct of_port_desc_stats_reply_s of_port_desc_stats_reply_t;

/**
 * Structure for of_port_desc_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_desc_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_port_desc_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_port_desc_stats_request_s of_port_desc_stats_request_t;

/**
 * Structure for of_port_mod object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_mod_uint32_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_port_mod_of_port_no_get_f and _set_f.
 *
 * @param hw_addr_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hw_addr, a variable of type of_mac_addr.  Functions
 *   are of type of_port_mod_of_mac_addr_get_f and _set_f.
 *
 * @param config_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for config, a variable of type uint32.  Functions
 *   are of type of_port_mod_uint32_get_f and _set_f.
 *
 * @param mask_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for mask, a variable of type uint32.  Functions
 *   are of type of_port_mod_uint32_get_f and _set_f.
 *
 * @param advertise_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for advertise, a variable of type uint32.  Functions
 *   are of type of_port_mod_uint32_get_f and _set_f.
 *
 */
typedef struct of_port_mod_s of_port_mod_t;

/**
 * Structure for of_port_mod_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_mod_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_port_mod_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_port_mod_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_port_mod_failed_error_msg_s of_port_mod_failed_error_msg_t;

/**
 * Structure for of_port_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_port_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for entries, a variable of type of_list_port_stats_entry.  Functions
 *   are of type of_port_stats_reply_of_list_port_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_port_stats_reply_s of_port_stats_reply_t;

/**
 * Structure for of_port_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_port_stats_request_uint16_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_port_stats_request_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_port_stats_request_s of_port_stats_request_t;

/**
 * Structure for of_port_status object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_port_status_uint32_get_f and _set_f.
 *
 * @param reason_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for reason, a variable of type uint8.  Functions
 *   are of type of_port_status_uint8_get_f and _set_f.
 *
 * @param desc_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for desc, a variable of type of_port_desc.  Functions
 *   are of type of_port_status_of_port_desc_get_f and _set_f.
 *
 */
typedef struct of_port_status_s of_port_status_t;

/**
 * Structure for of_queue_get_config_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_queue_get_config_reply_uint32_get_f and _set_f.
 *
 * @param port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port, a variable of type of_port_no.  Functions
 *   are of type of_queue_get_config_reply_of_port_no_get_f and _set_f.
 *
 * @param queues_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for queues, a variable of type of_list_packet_queue.  Functions
 *   are of type of_queue_get_config_reply_of_list_packet_queue_get_f and _set_f.
 *
 */
typedef struct of_queue_get_config_reply_s of_queue_get_config_reply_t;

/**
 * Structure for of_queue_get_config_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_queue_get_config_request_uint32_get_f and _set_f.
 *
 * @param port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port, a variable of type of_port_no.  Functions
 *   are of type of_queue_get_config_request_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_queue_get_config_request_s of_queue_get_config_request_t;

/**
 * Structure for of_queue_op_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_queue_op_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_queue_op_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_queue_op_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_queue_op_failed_error_msg_s of_queue_op_failed_error_msg_t;

/**
 * Structure for of_queue_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_queue_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_queue_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for entries, a variable of type of_list_queue_stats_entry.  Functions
 *   are of type of_queue_stats_reply_of_list_queue_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_queue_stats_reply_s of_queue_stats_reply_t;

/**
 * Structure for of_queue_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_queue_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_queue_stats_request_uint16_get_f and _set_f.
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_queue_stats_request_of_port_no_get_f and _set_f.
 *
 * @param queue_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for queue_id, a variable of type uint32.  Functions
 *   are of type of_queue_stats_request_uint32_get_f and _set_f.
 *
 */
typedef struct of_queue_stats_request_s of_queue_stats_request_t;

/**
 * Structure for of_role_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_role_reply_uint32_get_f and _set_f.
 *
 * @param role_get/set ( OF_1_2 OF_1_3).
 *   Accessors for role, a variable of type uint32.  Functions
 *   are of type of_role_reply_uint32_get_f and _set_f.
 *
 * @param generation_id_get/set ( OF_1_2 OF_1_3).
 *   Accessors for generation_id, a variable of type uint64.  Functions
 *   are of type of_role_reply_uint64_get_f and _set_f.
 *
 */
typedef struct of_role_reply_s of_role_reply_t;

/**
 * Structure for of_role_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_role_request_uint32_get_f and _set_f.
 *
 * @param role_get/set ( OF_1_2 OF_1_3).
 *   Accessors for role, a variable of type uint32.  Functions
 *   are of type of_role_request_uint32_get_f and _set_f.
 *
 * @param generation_id_get/set ( OF_1_2 OF_1_3).
 *   Accessors for generation_id, a variable of type uint64.  Functions
 *   are of type of_role_request_uint64_get_f and _set_f.
 *
 */
typedef struct of_role_request_s of_role_request_t;

/**
 * Structure for of_role_request_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_role_request_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_2 OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_role_request_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_role_request_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_role_request_failed_error_msg_s of_role_request_failed_error_msg_t;

/**
 * Structure for of_set_config object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_set_config_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_set_config_uint16_get_f and _set_f.
 *
 * @param miss_send_len_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for miss_send_len, a variable of type uint16.  Functions
 *   are of type of_set_config_uint16_get_f and _set_f.
 *
 */
typedef struct of_set_config_s of_set_config_t;

/**
 * Structure for of_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_stats_reply_uint16_get_f and _set_f.
 *
 */
typedef struct of_stats_reply_s of_stats_reply_t;

/**
 * Structure for of_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_stats_request_s of_stats_request_t;

/**
 * Structure for of_switch_config_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_switch_config_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set 
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_switch_config_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_switch_config_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_switch_config_failed_error_msg_s of_switch_config_failed_error_msg_t;

/**
 * Structure for of_table_features_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_features_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set ( OF_1_3).
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_table_features_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_table_features_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_table_features_failed_error_msg_s of_table_features_failed_error_msg_t;

/**
 * Structure for of_table_features_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_features_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_table_features_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_table_features.  Functions
 *   are of type of_table_features_stats_reply_of_list_table_features_get_f and _set_f.
 *
 */
typedef struct of_table_features_stats_reply_s of_table_features_stats_reply_t;

/**
 * Structure for of_table_features_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_features_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_table_features_stats_request_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_table_features.  Functions
 *   are of type of_table_features_stats_request_of_list_table_features_get_f and _set_f.
 *
 */
typedef struct of_table_features_stats_request_s of_table_features_stats_request_t;

/**
 * Structure for of_table_mod object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_mod_uint32_get_f and _set_f.
 *
 * @param table_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_table_mod_uint8_get_f and _set_f.
 *
 * @param config_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for config, a variable of type uint32.  Functions
 *   are of type of_table_mod_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_mod_s of_table_mod_t;

/**
 * Structure for of_table_mod_failed_error_msg object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set 
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_mod_failed_error_msg_uint32_get_f and _set_f.
 *
 * @param code_get/set 
 *   Accessors for code, a variable of type uint16.  Functions
 *   are of type of_table_mod_failed_error_msg_uint16_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_table_mod_failed_error_msg_of_octets_get_f and _set_f.
 *
 */
typedef struct of_table_mod_failed_error_msg_s of_table_mod_failed_error_msg_t;

/**
 * Structure for of_table_stats_reply object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_stats_reply_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_table_stats_reply_uint16_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for entries, a variable of type of_list_table_stats_entry.  Functions
 *   are of type of_table_stats_reply_of_list_table_stats_entry_get_f and _set_f.
 *
 */
typedef struct of_table_stats_reply_s of_table_stats_reply_t;

/**
 * Structure for of_table_stats_request object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_table_stats_request_uint32_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_table_stats_request_uint16_get_f and _set_f.
 *
 */
typedef struct of_table_stats_request_s of_table_stats_request_t;

/**
 * Structure for of_action object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_s of_action_t;

/**
 * Structure for of_action_bsn object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_bsn_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_action_bsn_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_bsn_s of_action_bsn_t;

/**
 * Structure for of_action_bsn_mirror object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_bsn_mirror_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_action_bsn_mirror_uint32_get_f and _set_f.
 *
 * @param dest_port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for dest_port, a variable of type uint32.  Functions
 *   are of type of_action_bsn_mirror_uint32_get_f and _set_f.
 *
 * @param vlan_tag_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for vlan_tag, a variable of type uint32.  Functions
 *   are of type of_action_bsn_mirror_uint32_get_f and _set_f.
 *
 * @param copy_stage_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for copy_stage, a variable of type uint8.  Functions
 *   are of type of_action_bsn_mirror_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_bsn_mirror_s of_action_bsn_mirror_t;

/**
 * Structure for of_action_bsn_set_tunnel_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_bsn_set_tunnel_dst_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_action_bsn_set_tunnel_dst_uint32_get_f and _set_f.
 *
 * @param dst_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for dst, a variable of type uint32.  Functions
 *   are of type of_action_bsn_set_tunnel_dst_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_bsn_set_tunnel_dst_s of_action_bsn_set_tunnel_dst_t;

/**
 * Structure for of_action_copy_ttl_in object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_copy_ttl_in_s of_action_copy_ttl_in_t;

/**
 * Structure for of_action_copy_ttl_out object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_copy_ttl_out_s of_action_copy_ttl_out_t;

/**
 * Structure for of_action_dec_mpls_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_dec_mpls_ttl_s of_action_dec_mpls_ttl_t;

/**
 * Structure for of_action_dec_nw_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_dec_nw_ttl_s of_action_dec_nw_ttl_t;

/**
 * Structure for of_action_enqueue object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_get/set ( OF_1_0).
 *   Accessors for port, a variable of type of_port_no.  Functions
 *   are of type of_action_enqueue_of_port_no_get_f and _set_f.
 *
 * @param queue_id_get/set ( OF_1_0).
 *   Accessors for queue_id, a variable of type uint32.  Functions
 *   are of type of_action_enqueue_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_enqueue_s of_action_enqueue_t;

/**
 * Structure for of_action_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_experimenter_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_action_experimenter_of_octets_get_f and _set_f.
 *
 */
typedef struct of_action_experimenter_s of_action_experimenter_t;

/**
 * Structure for of_action_group object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param group_id_get/set 
 *   Accessors for group_id, a variable of type uint32.  Functions
 *   are of type of_action_group_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_group_s of_action_group_t;

/**
 * Structure for of_action_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_header_s of_action_header_t;

/**
 * Structure for of_action_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_s of_action_id_t;

/**
 * Structure for of_action_id_bsn object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_bsn_s of_action_id_bsn_t;

/**
 * Structure for of_action_id_bsn_mirror object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_id_bsn_mirror_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_action_id_bsn_mirror_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_id_bsn_mirror_s of_action_id_bsn_mirror_t;

/**
 * Structure for of_action_id_bsn_set_tunnel_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_id_bsn_set_tunnel_dst_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_action_id_bsn_set_tunnel_dst_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_id_bsn_set_tunnel_dst_s of_action_id_bsn_set_tunnel_dst_t;

/**
 * Structure for of_action_id_copy_ttl_in object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_copy_ttl_in_s of_action_id_copy_ttl_in_t;

/**
 * Structure for of_action_id_copy_ttl_out object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_copy_ttl_out_s of_action_id_copy_ttl_out_t;

/**
 * Structure for of_action_id_dec_mpls_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_dec_mpls_ttl_s of_action_id_dec_mpls_ttl_t;

/**
 * Structure for of_action_id_dec_nw_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_dec_nw_ttl_s of_action_id_dec_nw_ttl_t;

/**
 * Structure for of_action_id_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_experimenter_s of_action_id_experimenter_t;

/**
 * Structure for of_action_id_group object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_group_s of_action_id_group_t;

/**
 * Structure for of_action_id_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_header_s of_action_id_header_t;

/**
 * Structure for of_action_id_nicira object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_nicira_s of_action_id_nicira_t;

/**
 * Structure for of_action_id_nicira_dec_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_id_nicira_dec_ttl_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint16.  Functions
 *   are of type of_action_id_nicira_dec_ttl_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_id_nicira_dec_ttl_s of_action_id_nicira_dec_ttl_t;

/**
 * Structure for of_action_id_output object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_output_s of_action_id_output_t;

/**
 * Structure for of_action_id_pop_mpls object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_pop_mpls_s of_action_id_pop_mpls_t;

/**
 * Structure for of_action_id_pop_pbb object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_pop_pbb_s of_action_id_pop_pbb_t;

/**
 * Structure for of_action_id_pop_vlan object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_pop_vlan_s of_action_id_pop_vlan_t;

/**
 * Structure for of_action_id_push_mpls object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_push_mpls_s of_action_id_push_mpls_t;

/**
 * Structure for of_action_id_push_pbb object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_push_pbb_s of_action_id_push_pbb_t;

/**
 * Structure for of_action_id_push_vlan object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_push_vlan_s of_action_id_push_vlan_t;

/**
 * Structure for of_action_id_set_field object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_set_field_s of_action_id_set_field_t;

/**
 * Structure for of_action_id_set_mpls_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_set_mpls_ttl_s of_action_id_set_mpls_ttl_t;

/**
 * Structure for of_action_id_set_nw_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_set_nw_ttl_s of_action_id_set_nw_ttl_t;

/**
 * Structure for of_action_id_set_queue object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_id_set_queue_s of_action_id_set_queue_t;

/**
 * Structure for of_action_nicira object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_nicira_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint16.  Functions
 *   are of type of_action_nicira_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_nicira_s of_action_nicira_t;

/**
 * Structure for of_action_nicira_dec_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_action_nicira_dec_ttl_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for subtype, a variable of type uint16.  Functions
 *   are of type of_action_nicira_dec_ttl_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_nicira_dec_ttl_s of_action_nicira_dec_ttl_t;

/**
 * Structure for of_action_output object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port, a variable of type of_port_no.  Functions
 *   are of type of_action_output_of_port_no_get_f and _set_f.
 *
 * @param max_len_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for max_len, a variable of type uint16.  Functions
 *   are of type of_action_output_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_output_s of_action_output_t;

/**
 * Structure for of_action_pop_mpls object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param ethertype_get/set 
 *   Accessors for ethertype, a variable of type uint16.  Functions
 *   are of type of_action_pop_mpls_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_pop_mpls_s of_action_pop_mpls_t;

/**
 * Structure for of_action_pop_pbb object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_pop_pbb_s of_action_pop_pbb_t;

/**
 * Structure for of_action_pop_vlan object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_pop_vlan_s of_action_pop_vlan_t;

/**
 * Structure for of_action_push_mpls object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param ethertype_get/set 
 *   Accessors for ethertype, a variable of type uint16.  Functions
 *   are of type of_action_push_mpls_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_push_mpls_s of_action_push_mpls_t;

/**
 * Structure for of_action_push_pbb object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param ethertype_get/set ( OF_1_3).
 *   Accessors for ethertype, a variable of type uint16.  Functions
 *   are of type of_action_push_pbb_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_push_pbb_s of_action_push_pbb_t;

/**
 * Structure for of_action_push_vlan object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param ethertype_get/set 
 *   Accessors for ethertype, a variable of type uint16.  Functions
 *   are of type of_action_push_vlan_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_push_vlan_s of_action_push_vlan_t;

/**
 * Structure for of_action_set_dl_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param dl_addr_get/set ( OF_1_0 OF_1_1).
 *   Accessors for dl_addr, a variable of type of_mac_addr.  Functions
 *   are of type of_action_set_dl_dst_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_action_set_dl_dst_s of_action_set_dl_dst_t;

/**
 * Structure for of_action_set_dl_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param dl_addr_get/set ( OF_1_0 OF_1_1).
 *   Accessors for dl_addr, a variable of type of_mac_addr.  Functions
 *   are of type of_action_set_dl_src_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_action_set_dl_src_s of_action_set_dl_src_t;

/**
 * Structure for of_action_set_field object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param field_get/set ( OF_1_2 OF_1_3).
 *   Accessors for field, a variable of type of_octets.  Functions
 *   are of type of_action_set_field_of_octets_get_f and _set_f.
 *
 */
typedef struct of_action_set_field_s of_action_set_field_t;

/**
 * Structure for of_action_set_mpls_label object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param mpls_label_get/set ( OF_1_1).
 *   Accessors for mpls_label, a variable of type uint32.  Functions
 *   are of type of_action_set_mpls_label_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_set_mpls_label_s of_action_set_mpls_label_t;

/**
 * Structure for of_action_set_mpls_tc object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param mpls_tc_get/set ( OF_1_1).
 *   Accessors for mpls_tc, a variable of type uint8.  Functions
 *   are of type of_action_set_mpls_tc_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_mpls_tc_s of_action_set_mpls_tc_t;

/**
 * Structure for of_action_set_mpls_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param mpls_ttl_get/set 
 *   Accessors for mpls_ttl, a variable of type uint8.  Functions
 *   are of type of_action_set_mpls_ttl_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_mpls_ttl_s of_action_set_mpls_ttl_t;

/**
 * Structure for of_action_set_nw_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param nw_addr_get/set ( OF_1_0 OF_1_1).
 *   Accessors for nw_addr, a variable of type uint32.  Functions
 *   are of type of_action_set_nw_dst_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_set_nw_dst_s of_action_set_nw_dst_t;

/**
 * Structure for of_action_set_nw_ecn object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param nw_ecn_get/set ( OF_1_1).
 *   Accessors for nw_ecn, a variable of type uint8.  Functions
 *   are of type of_action_set_nw_ecn_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_nw_ecn_s of_action_set_nw_ecn_t;

/**
 * Structure for of_action_set_nw_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param nw_addr_get/set ( OF_1_0 OF_1_1).
 *   Accessors for nw_addr, a variable of type uint32.  Functions
 *   are of type of_action_set_nw_src_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_set_nw_src_s of_action_set_nw_src_t;

/**
 * Structure for of_action_set_nw_tos object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param nw_tos_get/set ( OF_1_0 OF_1_1).
 *   Accessors for nw_tos, a variable of type uint8.  Functions
 *   are of type of_action_set_nw_tos_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_nw_tos_s of_action_set_nw_tos_t;

/**
 * Structure for of_action_set_nw_ttl object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param nw_ttl_get/set 
 *   Accessors for nw_ttl, a variable of type uint8.  Functions
 *   are of type of_action_set_nw_ttl_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_nw_ttl_s of_action_set_nw_ttl_t;

/**
 * Structure for of_action_set_queue object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param queue_id_get/set 
 *   Accessors for queue_id, a variable of type uint32.  Functions
 *   are of type of_action_set_queue_uint32_get_f and _set_f.
 *
 */
typedef struct of_action_set_queue_s of_action_set_queue_t;

/**
 * Structure for of_action_set_tp_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param tp_port_get/set ( OF_1_0 OF_1_1).
 *   Accessors for tp_port, a variable of type uint16.  Functions
 *   are of type of_action_set_tp_dst_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_set_tp_dst_s of_action_set_tp_dst_t;

/**
 * Structure for of_action_set_tp_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param tp_port_get/set ( OF_1_0 OF_1_1).
 *   Accessors for tp_port, a variable of type uint16.  Functions
 *   are of type of_action_set_tp_src_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_set_tp_src_s of_action_set_tp_src_t;

/**
 * Structure for of_action_set_vlan_pcp object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param vlan_pcp_get/set ( OF_1_0 OF_1_1).
 *   Accessors for vlan_pcp, a variable of type uint8.  Functions
 *   are of type of_action_set_vlan_pcp_uint8_get_f and _set_f.
 *
 */
typedef struct of_action_set_vlan_pcp_s of_action_set_vlan_pcp_t;

/**
 * Structure for of_action_set_vlan_vid object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param vlan_vid_get/set ( OF_1_0 OF_1_1).
 *   Accessors for vlan_vid, a variable of type uint16.  Functions
 *   are of type of_action_set_vlan_vid_uint16_get_f and _set_f.
 *
 */
typedef struct of_action_set_vlan_vid_s of_action_set_vlan_vid_t;

/**
 * Structure for of_action_strip_vlan object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_action_strip_vlan_s of_action_strip_vlan_t;

/**
 * Structure for of_bsn_interface object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param hw_addr_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hw_addr, a variable of type of_mac_addr.  Functions
 *   are of type of_bsn_interface_of_mac_addr_get_f and _set_f.
 *
 * @param name_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for name, a variable of type of_port_name.  Functions
 *   are of type of_bsn_interface_of_port_name_get_f and _set_f.
 *
 * @param ipv4_addr_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for ipv4_addr, a variable of type of_ipv4.  Functions
 *   are of type of_bsn_interface_of_ipv4_get_f and _set_f.
 *
 * @param ipv4_netmask_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for ipv4_netmask, a variable of type of_ipv4.  Functions
 *   are of type of_bsn_interface_of_ipv4_get_f and _set_f.
 *
 */
typedef struct of_bsn_interface_s of_bsn_interface_t;

/**
 * Structure for of_bsn_vport object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_bsn_vport_s of_bsn_vport_t;

/**
 * Structure for of_bsn_vport_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_bsn_vport_header_s of_bsn_vport_header_t;

/**
 * Structure for of_bsn_vport_q_in_q object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type uint32.  Functions
 *   are of type of_bsn_vport_q_in_q_uint32_get_f and _set_f.
 *
 * @param ingress_tpid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for ingress_tpid, a variable of type uint16.  Functions
 *   are of type of_bsn_vport_q_in_q_uint16_get_f and _set_f.
 *
 * @param ingress_vlan_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for ingress_vlan_id, a variable of type uint16.  Functions
 *   are of type of_bsn_vport_q_in_q_uint16_get_f and _set_f.
 *
 * @param egress_tpid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for egress_tpid, a variable of type uint16.  Functions
 *   are of type of_bsn_vport_q_in_q_uint16_get_f and _set_f.
 *
 * @param egress_vlan_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for egress_vlan_id, a variable of type uint16.  Functions
 *   are of type of_bsn_vport_q_in_q_uint16_get_f and _set_f.
 *
 * @param if_name_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for if_name, a variable of type of_port_name.  Functions
 *   are of type of_bsn_vport_q_in_q_of_port_name_get_f and _set_f.
 *
 */
typedef struct of_bsn_vport_q_in_q_s of_bsn_vport_q_in_q_t;

/**
 * Structure for of_bucket object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param weight_get/set 
 *   Accessors for weight, a variable of type uint16.  Functions
 *   are of type of_bucket_uint16_get_f and _set_f.
 *
 * @param watch_port_get/set 
 *   Accessors for watch_port, a variable of type of_port_no.  Functions
 *   are of type of_bucket_of_port_no_get_f and _set_f.
 *
 * @param watch_group_get/set 
 *   Accessors for watch_group, a variable of type uint32.  Functions
 *   are of type of_bucket_uint32_get_f and _set_f.
 *
 * @param actions_get/set 
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_bucket_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_bucket_s of_bucket_t;

/**
 * Structure for of_bucket_counter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param packet_count_get/set 
 *   Accessors for packet_count, a variable of type uint64.  Functions
 *   are of type of_bucket_counter_uint64_get_f and _set_f.
 *
 * @param byte_count_get/set 
 *   Accessors for byte_count, a variable of type uint64.  Functions
 *   are of type of_bucket_counter_uint64_get_f and _set_f.
 *
 */
typedef struct of_bucket_counter_s of_bucket_counter_t;

/**
 * Structure for of_experimenter_stats_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_header_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_experimenter_stats_header_uint32_get_f and _set_f.
 *
 */
typedef struct of_experimenter_stats_header_s of_experimenter_stats_header_t;

/**
 * Structure for of_flow_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param table_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_flow_stats_entry_uint8_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_flow_stats_entry_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_flow_stats_entry_uint32_get_f and _set_f.
 *
 * @param priority_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for priority, a variable of type uint16.  Functions
 *   are of type of_flow_stats_entry_uint16_get_f and _set_f.
 *
 * @param idle_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for idle_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_stats_entry_uint16_get_f and _set_f.
 *
 * @param hard_timeout_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hard_timeout, a variable of type uint16.  Functions
 *   are of type of_flow_stats_entry_uint16_get_f and _set_f.
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_flow_stats_entry_uint16_get_f and _set_f.
 *
 * @param cookie_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for cookie, a variable of type uint64.  Functions
 *   are of type of_flow_stats_entry_uint64_get_f and _set_f.
 *
 * @param packet_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for packet_count, a variable of type uint64.  Functions
 *   are of type of_flow_stats_entry_uint64_get_f and _set_f.
 *
 * @param byte_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for byte_count, a variable of type uint64.  Functions
 *   are of type of_flow_stats_entry_uint64_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for match, a variable of type of_match.  Functions
 *   are of type of_flow_stats_entry_of_match_get_f and _set_f.
 *
 * @param instructions_get/set 
 *   Accessors for instructions, a variable of type of_list_instruction.  Functions
 *   are of type of_flow_stats_entry_of_list_instruction_get_f and _set_f.
 *
 * @param actions_get/set ( OF_1_0).
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_flow_stats_entry_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_flow_stats_entry_s of_flow_stats_entry_t;

/**
 * Structure for of_group_desc_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param group_type_get/set 
 *   Accessors for group_type, a variable of type uint8.  Functions
 *   are of type of_group_desc_stats_entry_uint8_get_f and _set_f.
 *
 * @param group_id_get/set 
 *   Accessors for group_id, a variable of type uint32.  Functions
 *   are of type of_group_desc_stats_entry_uint32_get_f and _set_f.
 *
 * @param buckets_get/set 
 *   Accessors for buckets, a variable of type of_list_bucket.  Functions
 *   are of type of_group_desc_stats_entry_of_list_bucket_get_f and _set_f.
 *
 */
typedef struct of_group_desc_stats_entry_s of_group_desc_stats_entry_t;

/**
 * Structure for of_group_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param group_id_get/set 
 *   Accessors for group_id, a variable of type uint32.  Functions
 *   are of type of_group_stats_entry_uint32_get_f and _set_f.
 *
 * @param ref_count_get/set 
 *   Accessors for ref_count, a variable of type uint32.  Functions
 *   are of type of_group_stats_entry_uint32_get_f and _set_f.
 *
 * @param packet_count_get/set 
 *   Accessors for packet_count, a variable of type uint64.  Functions
 *   are of type of_group_stats_entry_uint64_get_f and _set_f.
 *
 * @param byte_count_get/set 
 *   Accessors for byte_count, a variable of type uint64.  Functions
 *   are of type of_group_stats_entry_uint64_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_group_stats_entry_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_group_stats_entry_uint32_get_f and _set_f.
 *
 * @param bucket_stats_get/set 
 *   Accessors for bucket_stats, a variable of type of_list_bucket_counter.  Functions
 *   are of type of_group_stats_entry_of_list_bucket_counter_get_f and _set_f.
 *
 */
typedef struct of_group_stats_entry_s of_group_stats_entry_t;

/**
 * Structure for of_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param xid_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for xid, a variable of type uint32.  Functions
 *   are of type of_header_uint32_get_f and _set_f.
 *
 */
typedef struct of_header_s of_header_t;

/**
 * Structure for of_hello_elem object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_hello_elem_s of_hello_elem_t;

/**
 * Structure for of_hello_elem_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_hello_elem_header_s of_hello_elem_header_t;

/**
 * Structure for of_hello_elem_versionbitmap object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param bitmaps_get/set ( OF_1_3).
 *   Accessors for bitmaps, a variable of type of_list_uint32.  Functions
 *   are of type of_hello_elem_versionbitmap_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_hello_elem_versionbitmap_s of_hello_elem_versionbitmap_t;

/**
 * Structure for of_instruction object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_instruction_s of_instruction_t;

/**
 * Structure for of_instruction_apply_actions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param actions_get/set 
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_instruction_apply_actions_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_instruction_apply_actions_s of_instruction_apply_actions_t;

/**
 * Structure for of_instruction_clear_actions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_instruction_clear_actions_s of_instruction_clear_actions_t;

/**
 * Structure for of_instruction_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set 
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_instruction_experimenter_uint32_get_f and _set_f.
 *
 * @param data_get/set 
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_instruction_experimenter_of_octets_get_f and _set_f.
 *
 */
typedef struct of_instruction_experimenter_s of_instruction_experimenter_t;

/**
 * Structure for of_instruction_goto_table object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param table_id_get/set 
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_instruction_goto_table_uint8_get_f and _set_f.
 *
 */
typedef struct of_instruction_goto_table_s of_instruction_goto_table_t;

/**
 * Structure for of_instruction_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_instruction_header_s of_instruction_header_t;

/**
 * Structure for of_instruction_meter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_instruction_meter_uint32_get_f and _set_f.
 *
 */
typedef struct of_instruction_meter_s of_instruction_meter_t;

/**
 * Structure for of_instruction_write_actions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param actions_get/set 
 *   Accessors for actions, a variable of type of_list_action.  Functions
 *   are of type of_instruction_write_actions_of_list_action_get_f and _set_f.
 *
 */
typedef struct of_instruction_write_actions_s of_instruction_write_actions_t;

/**
 * Structure for of_instruction_write_metadata object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param metadata_get/set 
 *   Accessors for metadata, a variable of type uint64.  Functions
 *   are of type of_instruction_write_metadata_uint64_get_f and _set_f.
 *
 * @param metadata_mask_get/set 
 *   Accessors for metadata_mask, a variable of type uint64.  Functions
 *   are of type of_instruction_write_metadata_uint64_get_f and _set_f.
 *
 */
typedef struct of_instruction_write_metadata_s of_instruction_write_metadata_t;

/**
 * Structure for of_match_v1 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param wildcards_get/set ( OF_1_0).
 *   Accessors for wildcards, a variable of type of_wc_bmap.  Functions
 *   are of type of_match_v1_of_wc_bmap_get_f and _set_f.
 *
 * @param in_port_get/set ( OF_1_0).
 *   Accessors for in_port, a variable of type of_port_no.  Functions
 *   are of type of_match_v1_of_port_no_get_f and _set_f.
 *
 * @param eth_src_get/set ( OF_1_0).
 *   Accessors for eth_src, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v1_of_mac_addr_get_f and _set_f.
 *
 * @param eth_dst_get/set ( OF_1_0).
 *   Accessors for eth_dst, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v1_of_mac_addr_get_f and _set_f.
 *
 * @param vlan_vid_get/set ( OF_1_0).
 *   Accessors for vlan_vid, a variable of type uint16.  Functions
 *   are of type of_match_v1_uint16_get_f and _set_f.
 *
 * @param vlan_pcp_get/set ( OF_1_0).
 *   Accessors for vlan_pcp, a variable of type uint8.  Functions
 *   are of type of_match_v1_uint8_get_f and _set_f.
 *
 * @param eth_type_get/set ( OF_1_0).
 *   Accessors for eth_type, a variable of type uint16.  Functions
 *   are of type of_match_v1_uint16_get_f and _set_f.
 *
 * @param ip_dscp_get/set ( OF_1_0).
 *   Accessors for ip_dscp, a variable of type uint8.  Functions
 *   are of type of_match_v1_uint8_get_f and _set_f.
 *
 * @param ip_proto_get/set ( OF_1_0).
 *   Accessors for ip_proto, a variable of type uint8.  Functions
 *   are of type of_match_v1_uint8_get_f and _set_f.
 *
 * @param ipv4_src_get/set ( OF_1_0).
 *   Accessors for ipv4_src, a variable of type of_ipv4.  Functions
 *   are of type of_match_v1_of_ipv4_get_f and _set_f.
 *
 * @param ipv4_dst_get/set ( OF_1_0).
 *   Accessors for ipv4_dst, a variable of type of_ipv4.  Functions
 *   are of type of_match_v1_of_ipv4_get_f and _set_f.
 *
 * @param tcp_src_get/set ( OF_1_0).
 *   Accessors for tcp_src, a variable of type uint16.  Functions
 *   are of type of_match_v1_uint16_get_f and _set_f.
 *
 * @param tcp_dst_get/set ( OF_1_0).
 *   Accessors for tcp_dst, a variable of type uint16.  Functions
 *   are of type of_match_v1_uint16_get_f and _set_f.
 *
 */
typedef struct of_match_v1_s of_match_v1_t;

/**
 * Structure for of_match_v2 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param in_port_get/set ( OF_1_1).
 *   Accessors for in_port, a variable of type of_port_no.  Functions
 *   are of type of_match_v2_of_port_no_get_f and _set_f.
 *
 * @param wildcards_get/set ( OF_1_1).
 *   Accessors for wildcards, a variable of type of_wc_bmap.  Functions
 *   are of type of_match_v2_of_wc_bmap_get_f and _set_f.
 *
 * @param eth_src_get/set ( OF_1_1).
 *   Accessors for eth_src, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v2_of_mac_addr_get_f and _set_f.
 *
 * @param eth_src_mask_get/set ( OF_1_1).
 *   Accessors for eth_src_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v2_of_mac_addr_get_f and _set_f.
 *
 * @param eth_dst_get/set ( OF_1_1).
 *   Accessors for eth_dst, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v2_of_mac_addr_get_f and _set_f.
 *
 * @param eth_dst_mask_get/set ( OF_1_1).
 *   Accessors for eth_dst_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_match_v2_of_mac_addr_get_f and _set_f.
 *
 * @param vlan_vid_get/set ( OF_1_1).
 *   Accessors for vlan_vid, a variable of type uint16.  Functions
 *   are of type of_match_v2_uint16_get_f and _set_f.
 *
 * @param vlan_pcp_get/set ( OF_1_1).
 *   Accessors for vlan_pcp, a variable of type uint8.  Functions
 *   are of type of_match_v2_uint8_get_f and _set_f.
 *
 * @param eth_type_get/set ( OF_1_1).
 *   Accessors for eth_type, a variable of type uint16.  Functions
 *   are of type of_match_v2_uint16_get_f and _set_f.
 *
 * @param ip_dscp_get/set ( OF_1_1).
 *   Accessors for ip_dscp, a variable of type uint8.  Functions
 *   are of type of_match_v2_uint8_get_f and _set_f.
 *
 * @param ip_proto_get/set ( OF_1_1).
 *   Accessors for ip_proto, a variable of type uint8.  Functions
 *   are of type of_match_v2_uint8_get_f and _set_f.
 *
 * @param ipv4_src_get/set ( OF_1_1).
 *   Accessors for ipv4_src, a variable of type of_ipv4.  Functions
 *   are of type of_match_v2_of_ipv4_get_f and _set_f.
 *
 * @param ipv4_src_mask_get/set ( OF_1_1).
 *   Accessors for ipv4_src_mask, a variable of type of_ipv4.  Functions
 *   are of type of_match_v2_of_ipv4_get_f and _set_f.
 *
 * @param ipv4_dst_get/set ( OF_1_1).
 *   Accessors for ipv4_dst, a variable of type of_ipv4.  Functions
 *   are of type of_match_v2_of_ipv4_get_f and _set_f.
 *
 * @param ipv4_dst_mask_get/set ( OF_1_1).
 *   Accessors for ipv4_dst_mask, a variable of type of_ipv4.  Functions
 *   are of type of_match_v2_of_ipv4_get_f and _set_f.
 *
 * @param tcp_src_get/set ( OF_1_1).
 *   Accessors for tcp_src, a variable of type uint16.  Functions
 *   are of type of_match_v2_uint16_get_f and _set_f.
 *
 * @param tcp_dst_get/set ( OF_1_1).
 *   Accessors for tcp_dst, a variable of type uint16.  Functions
 *   are of type of_match_v2_uint16_get_f and _set_f.
 *
 * @param mpls_label_get/set ( OF_1_1).
 *   Accessors for mpls_label, a variable of type uint32.  Functions
 *   are of type of_match_v2_uint32_get_f and _set_f.
 *
 * @param mpls_tc_get/set ( OF_1_1).
 *   Accessors for mpls_tc, a variable of type uint8.  Functions
 *   are of type of_match_v2_uint8_get_f and _set_f.
 *
 * @param metadata_get/set ( OF_1_1).
 *   Accessors for metadata, a variable of type uint64.  Functions
 *   are of type of_match_v2_uint64_get_f and _set_f.
 *
 * @param metadata_mask_get/set ( OF_1_1).
 *   Accessors for metadata_mask, a variable of type uint64.  Functions
 *   are of type of_match_v2_uint64_get_f and _set_f.
 *
 */
typedef struct of_match_v2_s of_match_v2_t;

/**
 * Structure for of_match_v3 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_list_get/set ( OF_1_2 OF_1_3).
 *   Accessors for oxm_list, a variable of type of_list_oxm.  Functions
 *   are of type of_match_v3_of_list_oxm_get_f and _set_f.
 *
 */
typedef struct of_match_v3_s of_match_v3_t;

/**
 * Structure for of_meter_band object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_meter_band_s of_meter_band_t;

/**
 * Structure for of_meter_band_drop object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param rate_get/set ( OF_1_3).
 *   Accessors for rate, a variable of type uint32.  Functions
 *   are of type of_meter_band_drop_uint32_get_f and _set_f.
 *
 * @param burst_size_get/set ( OF_1_3).
 *   Accessors for burst_size, a variable of type uint32.  Functions
 *   are of type of_meter_band_drop_uint32_get_f and _set_f.
 *
 */
typedef struct of_meter_band_drop_s of_meter_band_drop_t;

/**
 * Structure for of_meter_band_dscp_remark object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param rate_get/set ( OF_1_3).
 *   Accessors for rate, a variable of type uint32.  Functions
 *   are of type of_meter_band_dscp_remark_uint32_get_f and _set_f.
 *
 * @param burst_size_get/set ( OF_1_3).
 *   Accessors for burst_size, a variable of type uint32.  Functions
 *   are of type of_meter_band_dscp_remark_uint32_get_f and _set_f.
 *
 * @param prec_level_get/set ( OF_1_3).
 *   Accessors for prec_level, a variable of type uint8.  Functions
 *   are of type of_meter_band_dscp_remark_uint8_get_f and _set_f.
 *
 */
typedef struct of_meter_band_dscp_remark_s of_meter_band_dscp_remark_t;

/**
 * Structure for of_meter_band_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param rate_get/set ( OF_1_3).
 *   Accessors for rate, a variable of type uint32.  Functions
 *   are of type of_meter_band_experimenter_uint32_get_f and _set_f.
 *
 * @param burst_size_get/set ( OF_1_3).
 *   Accessors for burst_size, a variable of type uint32.  Functions
 *   are of type of_meter_band_experimenter_uint32_get_f and _set_f.
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_meter_band_experimenter_uint32_get_f and _set_f.
 *
 */
typedef struct of_meter_band_experimenter_s of_meter_band_experimenter_t;

/**
 * Structure for of_meter_band_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_meter_band_header_s of_meter_band_header_t;

/**
 * Structure for of_meter_band_stats object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param packet_band_count_get/set ( OF_1_3).
 *   Accessors for packet_band_count, a variable of type uint64.  Functions
 *   are of type of_meter_band_stats_uint64_get_f and _set_f.
 *
 * @param byte_band_count_get/set ( OF_1_3).
 *   Accessors for byte_band_count, a variable of type uint64.  Functions
 *   are of type of_meter_band_stats_uint64_get_f and _set_f.
 *
 */
typedef struct of_meter_band_stats_s of_meter_band_stats_t;

/**
 * Structure for of_meter_config object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param flags_get/set ( OF_1_3).
 *   Accessors for flags, a variable of type uint16.  Functions
 *   are of type of_meter_config_uint16_get_f and _set_f.
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_meter_config_uint32_get_f and _set_f.
 *
 * @param entries_get/set ( OF_1_3).
 *   Accessors for entries, a variable of type of_list_meter_band.  Functions
 *   are of type of_meter_config_of_list_meter_band_get_f and _set_f.
 *
 */
typedef struct of_meter_config_s of_meter_config_t;

/**
 * Structure for of_meter_features object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param max_meter_get/set ( OF_1_3).
 *   Accessors for max_meter, a variable of type uint32.  Functions
 *   are of type of_meter_features_uint32_get_f and _set_f.
 *
 * @param band_types_get/set ( OF_1_3).
 *   Accessors for band_types, a variable of type uint32.  Functions
 *   are of type of_meter_features_uint32_get_f and _set_f.
 *
 * @param capabilities_get/set ( OF_1_3).
 *   Accessors for capabilities, a variable of type uint32.  Functions
 *   are of type of_meter_features_uint32_get_f and _set_f.
 *
 * @param max_bands_get/set ( OF_1_3).
 *   Accessors for max_bands, a variable of type uint8.  Functions
 *   are of type of_meter_features_uint8_get_f and _set_f.
 *
 * @param max_color_get/set ( OF_1_3).
 *   Accessors for max_color, a variable of type uint8.  Functions
 *   are of type of_meter_features_uint8_get_f and _set_f.
 *
 */
typedef struct of_meter_features_s of_meter_features_t;

/**
 * Structure for of_meter_stats object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param meter_id_get/set ( OF_1_3).
 *   Accessors for meter_id, a variable of type uint32.  Functions
 *   are of type of_meter_stats_uint32_get_f and _set_f.
 *
 * @param flow_count_get/set ( OF_1_3).
 *   Accessors for flow_count, a variable of type uint32.  Functions
 *   are of type of_meter_stats_uint32_get_f and _set_f.
 *
 * @param packet_in_count_get/set ( OF_1_3).
 *   Accessors for packet_in_count, a variable of type uint64.  Functions
 *   are of type of_meter_stats_uint64_get_f and _set_f.
 *
 * @param byte_in_count_get/set ( OF_1_3).
 *   Accessors for byte_in_count, a variable of type uint64.  Functions
 *   are of type of_meter_stats_uint64_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_meter_stats_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_meter_stats_uint32_get_f and _set_f.
 *
 * @param band_stats_get/set ( OF_1_3).
 *   Accessors for band_stats, a variable of type of_list_meter_band_stats.  Functions
 *   are of type of_meter_stats_of_list_meter_band_stats_get_f and _set_f.
 *
 */
typedef struct of_meter_stats_s of_meter_stats_t;

/**
 * Structure for of_oxm object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_oxm_s of_oxm_t;

/**
 * Structure for of_oxm_arp_op object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_arp_op_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_op_s of_oxm_arp_op_t;

/**
 * Structure for of_oxm_arp_op_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_arp_op_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_arp_op_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_op_masked_s of_oxm_arp_op_masked_t;

/**
 * Structure for of_oxm_arp_sha object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_sha_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_sha_s of_oxm_arp_sha_t;

/**
 * Structure for of_oxm_arp_sha_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_sha_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_sha_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_sha_masked_s of_oxm_arp_sha_masked_t;

/**
 * Structure for of_oxm_arp_spa object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_spa_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_spa_s of_oxm_arp_spa_t;

/**
 * Structure for of_oxm_arp_spa_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_spa_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_spa_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_spa_masked_s of_oxm_arp_spa_masked_t;

/**
 * Structure for of_oxm_arp_tha object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_tha_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_tha_s of_oxm_arp_tha_t;

/**
 * Structure for of_oxm_arp_tha_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_tha_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_arp_tha_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_tha_masked_s of_oxm_arp_tha_masked_t;

/**
 * Structure for of_oxm_arp_tpa object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_tpa_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_tpa_s of_oxm_arp_tpa_t;

/**
 * Structure for of_oxm_arp_tpa_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_tpa_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_arp_tpa_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_arp_tpa_masked_s of_oxm_arp_tpa_masked_t;

/**
 * Structure for of_oxm_bsn_global_vrf_allowed object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_bsn_global_vrf_allowed_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_global_vrf_allowed_s of_oxm_bsn_global_vrf_allowed_t;

/**
 * Structure for of_oxm_bsn_global_vrf_allowed_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_bsn_global_vrf_allowed_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_bsn_global_vrf_allowed_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_global_vrf_allowed_masked_s of_oxm_bsn_global_vrf_allowed_masked_t;

/**
 * Structure for of_oxm_bsn_in_ports_128 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_bitmap_128.  Functions
 *   are of type of_oxm_bsn_in_ports_128_of_bitmap_128_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_in_ports_128_s of_oxm_bsn_in_ports_128_t;

/**
 * Structure for of_oxm_bsn_in_ports_128_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_bitmap_128.  Functions
 *   are of type of_oxm_bsn_in_ports_128_masked_of_bitmap_128_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_bitmap_128.  Functions
 *   are of type of_oxm_bsn_in_ports_128_masked_of_bitmap_128_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_in_ports_128_masked_s of_oxm_bsn_in_ports_128_masked_t;

/**
 * Structure for of_oxm_bsn_l3_dst_class_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_dst_class_id_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_dst_class_id_s of_oxm_bsn_l3_dst_class_id_t;

/**
 * Structure for of_oxm_bsn_l3_dst_class_id_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_dst_class_id_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_dst_class_id_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_dst_class_id_masked_s of_oxm_bsn_l3_dst_class_id_masked_t;

/**
 * Structure for of_oxm_bsn_l3_interface_class_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_interface_class_id_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_interface_class_id_s of_oxm_bsn_l3_interface_class_id_t;

/**
 * Structure for of_oxm_bsn_l3_interface_class_id_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_interface_class_id_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_interface_class_id_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_interface_class_id_masked_s of_oxm_bsn_l3_interface_class_id_masked_t;

/**
 * Structure for of_oxm_bsn_l3_src_class_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_src_class_id_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_src_class_id_s of_oxm_bsn_l3_src_class_id_t;

/**
 * Structure for of_oxm_bsn_l3_src_class_id_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_src_class_id_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_l3_src_class_id_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_l3_src_class_id_masked_s of_oxm_bsn_l3_src_class_id_masked_t;

/**
 * Structure for of_oxm_bsn_lag_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_lag_id_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_lag_id_s of_oxm_bsn_lag_id_t;

/**
 * Structure for of_oxm_bsn_lag_id_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_lag_id_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_lag_id_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_lag_id_masked_s of_oxm_bsn_lag_id_masked_t;

/**
 * Structure for of_oxm_bsn_vrf object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_vrf_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_vrf_s of_oxm_bsn_vrf_t;

/**
 * Structure for of_oxm_bsn_vrf_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_vrf_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_bsn_vrf_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_bsn_vrf_masked_s of_oxm_bsn_vrf_masked_t;

/**
 * Structure for of_oxm_eth_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_dst_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_dst_s of_oxm_eth_dst_t;

/**
 * Structure for of_oxm_eth_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_dst_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_dst_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_dst_masked_s of_oxm_eth_dst_masked_t;

/**
 * Structure for of_oxm_eth_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_src_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_src_s of_oxm_eth_src_t;

/**
 * Structure for of_oxm_eth_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_src_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_eth_src_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_src_masked_s of_oxm_eth_src_masked_t;

/**
 * Structure for of_oxm_eth_type object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_eth_type_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_type_s of_oxm_eth_type_t;

/**
 * Structure for of_oxm_eth_type_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_eth_type_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_eth_type_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_eth_type_masked_s of_oxm_eth_type_masked_t;

/**
 * Structure for of_oxm_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_oxm_header_s of_oxm_header_t;

/**
 * Structure for of_oxm_icmpv4_code object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_code_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv4_code_s of_oxm_icmpv4_code_t;

/**
 * Structure for of_oxm_icmpv4_code_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_code_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_code_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv4_code_masked_s of_oxm_icmpv4_code_masked_t;

/**
 * Structure for of_oxm_icmpv4_type object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_type_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv4_type_s of_oxm_icmpv4_type_t;

/**
 * Structure for of_oxm_icmpv4_type_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_type_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv4_type_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv4_type_masked_s of_oxm_icmpv4_type_masked_t;

/**
 * Structure for of_oxm_icmpv6_code object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_code_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv6_code_s of_oxm_icmpv6_code_t;

/**
 * Structure for of_oxm_icmpv6_code_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_code_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_code_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv6_code_masked_s of_oxm_icmpv6_code_masked_t;

/**
 * Structure for of_oxm_icmpv6_type object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_type_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv6_type_s of_oxm_icmpv6_type_t;

/**
 * Structure for of_oxm_icmpv6_type_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_type_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_icmpv6_type_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_icmpv6_type_masked_s of_oxm_icmpv6_type_masked_t;

/**
 * Structure for of_oxm_in_phy_port object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_phy_port_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_oxm_in_phy_port_s of_oxm_in_phy_port_t;

/**
 * Structure for of_oxm_in_phy_port_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_phy_port_masked_of_port_no_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_phy_port_masked_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_oxm_in_phy_port_masked_s of_oxm_in_phy_port_masked_t;

/**
 * Structure for of_oxm_in_port object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_port_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_oxm_in_port_s of_oxm_in_port_t;

/**
 * Structure for of_oxm_in_port_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_port_masked_of_port_no_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_port_no.  Functions
 *   are of type of_oxm_in_port_masked_of_port_no_get_f and _set_f.
 *
 */
typedef struct of_oxm_in_port_masked_s of_oxm_in_port_masked_t;

/**
 * Structure for of_oxm_ip_dscp object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_dscp_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_dscp_s of_oxm_ip_dscp_t;

/**
 * Structure for of_oxm_ip_dscp_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_dscp_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_dscp_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_dscp_masked_s of_oxm_ip_dscp_masked_t;

/**
 * Structure for of_oxm_ip_ecn object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_ecn_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_ecn_s of_oxm_ip_ecn_t;

/**
 * Structure for of_oxm_ip_ecn_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_ecn_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_ecn_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_ecn_masked_s of_oxm_ip_ecn_masked_t;

/**
 * Structure for of_oxm_ip_proto object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_proto_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_proto_s of_oxm_ip_proto_t;

/**
 * Structure for of_oxm_ip_proto_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_proto_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_ip_proto_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_ip_proto_masked_s of_oxm_ip_proto_masked_t;

/**
 * Structure for of_oxm_ipv4_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_dst_of_ipv4_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv4_dst_s of_oxm_ipv4_dst_t;

/**
 * Structure for of_oxm_ipv4_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_dst_masked_of_ipv4_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_dst_masked_of_ipv4_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv4_dst_masked_s of_oxm_ipv4_dst_masked_t;

/**
 * Structure for of_oxm_ipv4_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_src_of_ipv4_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv4_src_s of_oxm_ipv4_src_t;

/**
 * Structure for of_oxm_ipv4_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_src_masked_of_ipv4_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_ipv4.  Functions
 *   are of type of_oxm_ipv4_src_masked_of_ipv4_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv4_src_masked_s of_oxm_ipv4_src_masked_t;

/**
 * Structure for of_oxm_ipv6_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_dst_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_dst_s of_oxm_ipv6_dst_t;

/**
 * Structure for of_oxm_ipv6_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_dst_masked_of_ipv6_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_dst_masked_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_dst_masked_s of_oxm_ipv6_dst_masked_t;

/**
 * Structure for of_oxm_ipv6_flabel object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_ipv6_flabel_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_flabel_s of_oxm_ipv6_flabel_t;

/**
 * Structure for of_oxm_ipv6_flabel_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_ipv6_flabel_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_ipv6_flabel_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_flabel_masked_s of_oxm_ipv6_flabel_masked_t;

/**
 * Structure for of_oxm_ipv6_nd_sll object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_sll_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_sll_s of_oxm_ipv6_nd_sll_t;

/**
 * Structure for of_oxm_ipv6_nd_sll_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_sll_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_sll_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_sll_masked_s of_oxm_ipv6_nd_sll_masked_t;

/**
 * Structure for of_oxm_ipv6_nd_target object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_nd_target_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_target_s of_oxm_ipv6_nd_target_t;

/**
 * Structure for of_oxm_ipv6_nd_target_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_nd_target_masked_of_ipv6_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_nd_target_masked_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_target_masked_s of_oxm_ipv6_nd_target_masked_t;

/**
 * Structure for of_oxm_ipv6_nd_tll object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_tll_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_tll_s of_oxm_ipv6_nd_tll_t;

/**
 * Structure for of_oxm_ipv6_nd_tll_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_tll_masked_of_mac_addr_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_mac_addr.  Functions
 *   are of type of_oxm_ipv6_nd_tll_masked_of_mac_addr_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_nd_tll_masked_s of_oxm_ipv6_nd_tll_masked_t;

/**
 * Structure for of_oxm_ipv6_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_src_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_src_s of_oxm_ipv6_src_t;

/**
 * Structure for of_oxm_ipv6_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_src_masked_of_ipv6_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type of_ipv6.  Functions
 *   are of type of_oxm_ipv6_src_masked_of_ipv6_get_f and _set_f.
 *
 */
typedef struct of_oxm_ipv6_src_masked_s of_oxm_ipv6_src_masked_t;

/**
 * Structure for of_oxm_metadata object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint64.  Functions
 *   are of type of_oxm_metadata_uint64_get_f and _set_f.
 *
 */
typedef struct of_oxm_metadata_s of_oxm_metadata_t;

/**
 * Structure for of_oxm_metadata_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint64.  Functions
 *   are of type of_oxm_metadata_masked_uint64_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint64.  Functions
 *   are of type of_oxm_metadata_masked_uint64_get_f and _set_f.
 *
 */
typedef struct of_oxm_metadata_masked_s of_oxm_metadata_masked_t;

/**
 * Structure for of_oxm_mpls_label object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_mpls_label_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_mpls_label_s of_oxm_mpls_label_t;

/**
 * Structure for of_oxm_mpls_label_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_oxm_mpls_label_masked_uint32_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint32.  Functions
 *   are of type of_oxm_mpls_label_masked_uint32_get_f and _set_f.
 *
 */
typedef struct of_oxm_mpls_label_masked_s of_oxm_mpls_label_masked_t;

/**
 * Structure for of_oxm_mpls_tc object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_mpls_tc_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_mpls_tc_s of_oxm_mpls_tc_t;

/**
 * Structure for of_oxm_mpls_tc_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_mpls_tc_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_mpls_tc_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_mpls_tc_masked_s of_oxm_mpls_tc_masked_t;

/**
 * Structure for of_oxm_sctp_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_dst_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_sctp_dst_s of_oxm_sctp_dst_t;

/**
 * Structure for of_oxm_sctp_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_dst_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_dst_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_sctp_dst_masked_s of_oxm_sctp_dst_masked_t;

/**
 * Structure for of_oxm_sctp_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_src_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_sctp_src_s of_oxm_sctp_src_t;

/**
 * Structure for of_oxm_sctp_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_src_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_sctp_src_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_sctp_src_masked_s of_oxm_sctp_src_masked_t;

/**
 * Structure for of_oxm_tcp_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_dst_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_tcp_dst_s of_oxm_tcp_dst_t;

/**
 * Structure for of_oxm_tcp_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_dst_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_dst_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_tcp_dst_masked_s of_oxm_tcp_dst_masked_t;

/**
 * Structure for of_oxm_tcp_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_src_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_tcp_src_s of_oxm_tcp_src_t;

/**
 * Structure for of_oxm_tcp_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_src_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_tcp_src_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_tcp_src_masked_s of_oxm_tcp_src_masked_t;

/**
 * Structure for of_oxm_udp_dst object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_dst_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_udp_dst_s of_oxm_udp_dst_t;

/**
 * Structure for of_oxm_udp_dst_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_dst_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_dst_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_udp_dst_masked_s of_oxm_udp_dst_masked_t;

/**
 * Structure for of_oxm_udp_src object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_src_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_udp_src_s of_oxm_udp_src_t;

/**
 * Structure for of_oxm_udp_src_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_src_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_udp_src_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_udp_src_masked_s of_oxm_udp_src_masked_t;

/**
 * Structure for of_oxm_vlan_pcp object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_vlan_pcp_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_vlan_pcp_s of_oxm_vlan_pcp_t;

/**
 * Structure for of_oxm_vlan_pcp_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_oxm_vlan_pcp_masked_uint8_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint8.  Functions
 *   are of type of_oxm_vlan_pcp_masked_uint8_get_f and _set_f.
 *
 */
typedef struct of_oxm_vlan_pcp_masked_s of_oxm_vlan_pcp_masked_t;

/**
 * Structure for of_oxm_vlan_vid object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_vlan_vid_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_vlan_vid_s of_oxm_vlan_vid_t;

/**
 * Structure for of_oxm_vlan_vid_masked object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value, a variable of type uint16.  Functions
 *   are of type of_oxm_vlan_vid_masked_uint16_get_f and _set_f.
 *
 * @param value_mask_get/set ( OF_1_2 OF_1_3).
 *   Accessors for value_mask, a variable of type uint16.  Functions
 *   are of type of_oxm_vlan_vid_masked_uint16_get_f and _set_f.
 *
 */
typedef struct of_oxm_vlan_vid_masked_s of_oxm_vlan_vid_masked_t;

/**
 * Structure for of_packet_queue object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param queue_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for queue_id, a variable of type uint32.  Functions
 *   are of type of_packet_queue_uint32_get_f and _set_f.
 *
 * @param port_get/set ( OF_1_2 OF_1_3).
 *   Accessors for port, a variable of type of_port_no.  Functions
 *   are of type of_packet_queue_of_port_no_get_f and _set_f.
 *
 * @param properties_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for properties, a variable of type of_list_queue_prop.  Functions
 *   are of type of_packet_queue_of_list_queue_prop_get_f and _set_f.
 *
 */
typedef struct of_packet_queue_s of_packet_queue_t;

/**
 * Structure for of_port_desc object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_port_desc_of_port_no_get_f and _set_f.
 *
 * @param hw_addr_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for hw_addr, a variable of type of_mac_addr.  Functions
 *   are of type of_port_desc_of_mac_addr_get_f and _set_f.
 *
 * @param name_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for name, a variable of type of_port_name.  Functions
 *   are of type of_port_desc_of_port_name_get_f and _set_f.
 *
 * @param config_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for config, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param state_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for state, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param curr_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for curr, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param advertised_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for advertised, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param supported_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for supported, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param peer_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for peer, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param curr_speed_get/set 
 *   Accessors for curr_speed, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 * @param max_speed_get/set 
 *   Accessors for max_speed, a variable of type uint32.  Functions
 *   are of type of_port_desc_uint32_get_f and _set_f.
 *
 */
typedef struct of_port_desc_s of_port_desc_t;

/**
 * Structure for of_port_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_port_stats_entry_of_port_no_get_f and _set_f.
 *
 * @param rx_packets_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_packets, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_packets_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_packets, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_bytes_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_bytes, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_bytes_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_bytes, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_dropped_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_dropped, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_dropped_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_dropped, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_errors_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_errors, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_errors_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_errors, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_frame_err_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_frame_err, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_over_err_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_over_err, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param rx_crc_err_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rx_crc_err, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param collisions_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for collisions, a variable of type uint64.  Functions
 *   are of type of_port_stats_entry_uint64_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_port_stats_entry_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_port_stats_entry_uint32_get_f and _set_f.
 *
 */
typedef struct of_port_stats_entry_s of_port_stats_entry_t;

/**
 * Structure for of_queue_prop object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_queue_prop_s of_queue_prop_t;

/**
 * Structure for of_queue_prop_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_2 OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_queue_prop_experimenter_uint32_get_f and _set_f.
 *
 * @param data_get/set ( OF_1_2 OF_1_3).
 *   Accessors for data, a variable of type of_octets.  Functions
 *   are of type of_queue_prop_experimenter_of_octets_get_f and _set_f.
 *
 */
typedef struct of_queue_prop_experimenter_s of_queue_prop_experimenter_t;

/**
 * Structure for of_queue_prop_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_queue_prop_header_s of_queue_prop_header_t;

/**
 * Structure for of_queue_prop_max_rate object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param rate_get/set ( OF_1_2 OF_1_3).
 *   Accessors for rate, a variable of type uint16.  Functions
 *   are of type of_queue_prop_max_rate_uint16_get_f and _set_f.
 *
 */
typedef struct of_queue_prop_max_rate_s of_queue_prop_max_rate_t;

/**
 * Structure for of_queue_prop_min_rate object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param rate_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for rate, a variable of type uint16.  Functions
 *   are of type of_queue_prop_min_rate_uint16_get_f and _set_f.
 *
 */
typedef struct of_queue_prop_min_rate_s of_queue_prop_min_rate_t;

/**
 * Structure for of_queue_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param port_no_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for port_no, a variable of type of_port_no.  Functions
 *   are of type of_queue_stats_entry_of_port_no_get_f and _set_f.
 *
 * @param queue_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for queue_id, a variable of type uint32.  Functions
 *   are of type of_queue_stats_entry_uint32_get_f and _set_f.
 *
 * @param tx_bytes_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_bytes, a variable of type uint64.  Functions
 *   are of type of_queue_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_packets_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_packets, a variable of type uint64.  Functions
 *   are of type of_queue_stats_entry_uint64_get_f and _set_f.
 *
 * @param tx_errors_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for tx_errors, a variable of type uint64.  Functions
 *   are of type of_queue_stats_entry_uint64_get_f and _set_f.
 *
 * @param duration_sec_get/set ( OF_1_3).
 *   Accessors for duration_sec, a variable of type uint32.  Functions
 *   are of type of_queue_stats_entry_uint32_get_f and _set_f.
 *
 * @param duration_nsec_get/set ( OF_1_3).
 *   Accessors for duration_nsec, a variable of type uint32.  Functions
 *   are of type of_queue_stats_entry_uint32_get_f and _set_f.
 *
 */
typedef struct of_queue_stats_entry_s of_queue_stats_entry_t;

/**
 * Structure for of_table_feature_prop object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_table_feature_prop_s of_table_feature_prop_t;

/**
 * Structure for of_table_feature_prop_apply_actions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param action_ids_get/set ( OF_1_3).
 *   Accessors for action_ids, a variable of type of_list_action_id.  Functions
 *   are of type of_table_feature_prop_apply_actions_of_list_action_id_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_apply_actions_s of_table_feature_prop_apply_actions_t;

/**
 * Structure for of_table_feature_prop_apply_actions_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param action_ids_get/set ( OF_1_3).
 *   Accessors for action_ids, a variable of type of_list_action_id.  Functions
 *   are of type of_table_feature_prop_apply_actions_miss_of_list_action_id_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_apply_actions_miss_s of_table_feature_prop_apply_actions_miss_t;

/**
 * Structure for of_table_feature_prop_apply_setfield object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_apply_setfield_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_apply_setfield_s of_table_feature_prop_apply_setfield_t;

/**
 * Structure for of_table_feature_prop_apply_setfield_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_apply_setfield_miss_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_apply_setfield_miss_s of_table_feature_prop_apply_setfield_miss_t;

/**
 * Structure for of_table_feature_prop_experimenter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param experimenter_get/set ( OF_1_3).
 *   Accessors for experimenter, a variable of type uint32.  Functions
 *   are of type of_table_feature_prop_experimenter_uint32_get_f and _set_f.
 *
 * @param subtype_get/set ( OF_1_3).
 *   Accessors for subtype, a variable of type uint32.  Functions
 *   are of type of_table_feature_prop_experimenter_uint32_get_f and _set_f.
 *
 * @param experimenter_data_get/set ( OF_1_3).
 *   Accessors for experimenter_data, a variable of type of_octets.  Functions
 *   are of type of_table_feature_prop_experimenter_of_octets_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_experimenter_s of_table_feature_prop_experimenter_t;

/**
 * Structure for of_table_feature_prop_header object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 */
typedef struct of_table_feature_prop_header_s of_table_feature_prop_header_t;

/**
 * Structure for of_table_feature_prop_instructions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param instruction_ids_get/set ( OF_1_3).
 *   Accessors for instruction_ids, a variable of type of_list_instruction.  Functions
 *   are of type of_table_feature_prop_instructions_of_list_instruction_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_instructions_s of_table_feature_prop_instructions_t;

/**
 * Structure for of_table_feature_prop_instructions_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param instruction_ids_get/set ( OF_1_3).
 *   Accessors for instruction_ids, a variable of type of_list_instruction.  Functions
 *   are of type of_table_feature_prop_instructions_miss_of_list_instruction_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_instructions_miss_s of_table_feature_prop_instructions_miss_t;

/**
 * Structure for of_table_feature_prop_match object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_match_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_match_s of_table_feature_prop_match_t;

/**
 * Structure for of_table_feature_prop_next_tables object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param next_table_ids_get/set ( OF_1_3).
 *   Accessors for next_table_ids, a variable of type of_list_uint8.  Functions
 *   are of type of_table_feature_prop_next_tables_of_list_uint8_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_next_tables_s of_table_feature_prop_next_tables_t;

/**
 * Structure for of_table_feature_prop_next_tables_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param next_table_ids_get/set ( OF_1_3).
 *   Accessors for next_table_ids, a variable of type of_list_uint8.  Functions
 *   are of type of_table_feature_prop_next_tables_miss_of_list_uint8_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_next_tables_miss_s of_table_feature_prop_next_tables_miss_t;

/**
 * Structure for of_table_feature_prop_wildcards object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_wildcards_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_wildcards_s of_table_feature_prop_wildcards_t;

/**
 * Structure for of_table_feature_prop_write_actions object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param action_ids_get/set ( OF_1_3).
 *   Accessors for action_ids, a variable of type of_list_action_id.  Functions
 *   are of type of_table_feature_prop_write_actions_of_list_action_id_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_write_actions_s of_table_feature_prop_write_actions_t;

/**
 * Structure for of_table_feature_prop_write_actions_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param action_ids_get/set ( OF_1_3).
 *   Accessors for action_ids, a variable of type of_list_action_id.  Functions
 *   are of type of_table_feature_prop_write_actions_miss_of_list_action_id_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_write_actions_miss_s of_table_feature_prop_write_actions_miss_t;

/**
 * Structure for of_table_feature_prop_write_setfield object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_write_setfield_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_write_setfield_s of_table_feature_prop_write_setfield_t;

/**
 * Structure for of_table_feature_prop_write_setfield_miss object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param oxm_ids_get/set ( OF_1_3).
 *   Accessors for oxm_ids, a variable of type of_list_uint32.  Functions
 *   are of type of_table_feature_prop_write_setfield_miss_of_list_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_feature_prop_write_setfield_miss_s of_table_feature_prop_write_setfield_miss_t;

/**
 * Structure for of_table_features object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param table_id_get/set ( OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_table_features_uint8_get_f and _set_f.
 *
 * @param name_get/set ( OF_1_3).
 *   Accessors for name, a variable of type of_table_name.  Functions
 *   are of type of_table_features_of_table_name_get_f and _set_f.
 *
 * @param metadata_match_get/set ( OF_1_3).
 *   Accessors for metadata_match, a variable of type uint64.  Functions
 *   are of type of_table_features_uint64_get_f and _set_f.
 *
 * @param metadata_write_get/set ( OF_1_3).
 *   Accessors for metadata_write, a variable of type uint64.  Functions
 *   are of type of_table_features_uint64_get_f and _set_f.
 *
 * @param config_get/set ( OF_1_3).
 *   Accessors for config, a variable of type uint32.  Functions
 *   are of type of_table_features_uint32_get_f and _set_f.
 *
 * @param max_entries_get/set ( OF_1_3).
 *   Accessors for max_entries, a variable of type uint32.  Functions
 *   are of type of_table_features_uint32_get_f and _set_f.
 *
 * @param properties_get/set ( OF_1_3).
 *   Accessors for properties, a variable of type of_list_table_feature_prop.  Functions
 *   are of type of_table_features_of_list_table_feature_prop_get_f and _set_f.
 *
 */
typedef struct of_table_features_s of_table_features_t;

/**
 * Structure for of_table_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param table_id_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for table_id, a variable of type uint8.  Functions
 *   are of type of_table_stats_entry_uint8_get_f and _set_f.
 *
 * @param active_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for active_count, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 * @param lookup_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for lookup_count, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param matched_count_get/set ( OF_1_0 OF_1_1 OF_1_2 OF_1_3).
 *   Accessors for matched_count, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param name_get/set 
 *   Accessors for name, a variable of type of_table_name.  Functions
 *   are of type of_table_stats_entry_of_table_name_get_f and _set_f.
 *
 * @param match_get/set ( OF_1_1 OF_1_2).
 *   Accessors for match, a variable of type of_match_bmap.  Functions
 *   are of type of_table_stats_entry_of_match_bmap_get_f and _set_f.
 *
 * @param wildcards_get/set 
 *   Accessors for wildcards, a variable of type of_wc_bmap.  Functions
 *   are of type of_table_stats_entry_of_wc_bmap_get_f and _set_f.
 *
 * @param write_actions_get/set ( OF_1_1 OF_1_2).
 *   Accessors for write_actions, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 * @param apply_actions_get/set ( OF_1_1 OF_1_2).
 *   Accessors for apply_actions, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 * @param write_setfields_get/set ( OF_1_2).
 *   Accessors for write_setfields, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param apply_setfields_get/set ( OF_1_2).
 *   Accessors for apply_setfields, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param metadata_match_get/set ( OF_1_2).
 *   Accessors for metadata_match, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param metadata_write_get/set ( OF_1_2).
 *   Accessors for metadata_write, a variable of type uint64.  Functions
 *   are of type of_table_stats_entry_uint64_get_f and _set_f.
 *
 * @param instructions_get/set ( OF_1_1 OF_1_2).
 *   Accessors for instructions, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 * @param config_get/set ( OF_1_1 OF_1_2).
 *   Accessors for config, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 * @param max_entries_get/set 
 *   Accessors for max_entries, a variable of type uint32.  Functions
 *   are of type of_table_stats_entry_uint32_get_f and _set_f.
 *
 */
typedef struct of_table_stats_entry_s of_table_stats_entry_t;

/**
 * Structure for of_uint32 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_3).
 *   Accessors for value, a variable of type uint32.  Functions
 *   are of type of_uint32_uint32_get_f and _set_f.
 *
 */
typedef struct of_uint32_s of_uint32_t;

/**
 * Structure for of_uint8 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param value_get/set ( OF_1_3).
 *   Accessors for value, a variable of type uint8.  Functions
 *   are of type of_uint8_uint8_get_f and _set_f.
 *
 */
typedef struct of_uint8_s of_uint8_t;

/**
 * Structure for of_list_action object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_action_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_action_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_action_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_action_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_action_s of_list_action_t;

/**
 * Structure for of_list_action_id object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_action_id_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_action_id_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_action_id_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_action_id_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_action_id_s of_list_action_id_t;

/**
 * Structure for of_list_bsn_interface object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_bsn_interface_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_bsn_interface_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_bsn_interface_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_bsn_interface_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_bsn_interface_s of_list_bsn_interface_t;

/**
 * Structure for of_list_bucket object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_bucket_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_bucket_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_bucket_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_bucket_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_bucket_s of_list_bucket_t;

/**
 * Structure for of_list_bucket_counter object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_bucket_counter_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_bucket_counter_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_bucket_counter_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_bucket_counter_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_bucket_counter_s of_list_bucket_counter_t;

/**
 * Structure for of_list_flow_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_flow_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_flow_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_flow_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_flow_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_flow_stats_entry_s of_list_flow_stats_entry_t;

/**
 * Structure for of_list_group_desc_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_group_desc_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_group_desc_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_group_desc_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_group_desc_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_group_desc_stats_entry_s of_list_group_desc_stats_entry_t;

/**
 * Structure for of_list_group_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_group_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_group_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_group_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_group_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_group_stats_entry_s of_list_group_stats_entry_t;

/**
 * Structure for of_list_hello_elem object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_hello_elem_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_hello_elem_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_hello_elem_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_hello_elem_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_hello_elem_s of_list_hello_elem_t;

/**
 * Structure for of_list_instruction object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_instruction_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_instruction_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_instruction_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_instruction_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_instruction_s of_list_instruction_t;

/**
 * Structure for of_list_meter_band object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_meter_band_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_meter_band_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_meter_band_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_meter_band_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_meter_band_s of_list_meter_band_t;

/**
 * Structure for of_list_meter_band_stats object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_meter_band_stats_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_meter_band_stats_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_meter_band_stats_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_meter_band_stats_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_meter_band_stats_s of_list_meter_band_stats_t;

/**
 * Structure for of_list_meter_stats object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_meter_stats_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_meter_stats_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_meter_stats_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_meter_stats_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_meter_stats_s of_list_meter_stats_t;

/**
 * Structure for of_list_oxm object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_oxm_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_oxm_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_oxm_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_oxm_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_oxm_s of_list_oxm_t;

/**
 * Structure for of_list_packet_queue object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_packet_queue_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_packet_queue_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_packet_queue_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_packet_queue_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_packet_queue_s of_list_packet_queue_t;

/**
 * Structure for of_list_port_desc object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_port_desc_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_port_desc_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_port_desc_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_port_desc_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_port_desc_s of_list_port_desc_t;

/**
 * Structure for of_list_port_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_port_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_port_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_port_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_port_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_port_stats_entry_s of_list_port_stats_entry_t;

/**
 * Structure for of_list_queue_prop object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_queue_prop_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_queue_prop_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_queue_prop_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_queue_prop_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_queue_prop_s of_list_queue_prop_t;

/**
 * Structure for of_list_queue_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_queue_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_queue_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_queue_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_queue_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_queue_stats_entry_s of_list_queue_stats_entry_t;

/**
 * Structure for of_list_table_feature_prop object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_table_feature_prop_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_table_feature_prop_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_table_feature_prop_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_table_feature_prop_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_table_feature_prop_s of_list_table_feature_prop_t;

/**
 * Structure for of_list_table_features object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_table_features_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_table_features_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_table_features_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_table_features_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_table_features_s of_list_table_features_t;

/**
 * Structure for of_list_table_stats_entry object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_table_stats_entry_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_table_stats_entry_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_table_stats_entry_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_table_stats_entry_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_table_stats_entry_s of_list_table_stats_entry_t;

/**
 * Structure for of_list_uint32 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_uint32_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_uint32_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_uint32_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_uint32_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_uint32_s of_list_uint32_t;

/**
 * Structure for of_list_uint8 object.  Get/set
 * accessors available in all versions unless noted otherwise
 *
 * @param first Function of type of_list_uint8_first_f.
 * Setup a TBD class object to the first entry in the list
 * @param next Function of type of_list_uint8_next_f.
 * Advance a TBD class object to the next entry in the list
 * @param append_bind Function of type of_list_uint8_append_bind_f
 * Setup a TBD class object for append to the end of the current list
 * @param append  Function of type @ref of_list_uint8_append_f.
 * Copy an item to the end of a list
 */
typedef struct of_list_uint8_s of_list_uint8_t;
#endif /* _LOCI_DOC_H_ */
